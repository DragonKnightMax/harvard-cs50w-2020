<!DOCTYPE html>
<html class="wf-ptsans-n4-active wf-ptsans-n7-active wf-active" lang="en-us"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width"><meta property="og:description" content="This course picks up where Harvard University's CS50 leaves off, diving more deeply into the design and implementation of web apps with Python, JavaScript, and SQL using frameworks like Django, React, and Bootstrap. Topics include database design, scalability, security, and user experience. Through hands-on projects, students learn to write and use APIs, create interactive UIs, and leverage cloud services like GitHub and Heroku. By semester’s end, students emerge with knowledge and experience in principles, languages, and tools that empower them to design and deploy applications on the Internet.">

        <meta property="og:image" content="https://img.youtube.com/vi/24Kf3v7kZyE/maxresdefault.jpg"><meta property="og:title" content="Lecture 5 - CS50's Web Programming with Python and JavaScript">

        <link href="https://cs50.harvard.edu/web/2020/favicon.ico?1645555620" rel="icon">

        <!-- https://fonts.google.com/specimen/PT+Sans?query=PT+Sans&selection.family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700 -->
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/webfont.js"></script>

        <!-- http://getbootstrap.com/docs/4.6/getting-started/introduction/ -->
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/jquery.js"></script>
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap.js"></script>

        <!-- https://bootstrap-table.com/docs/getting-started/introduction/ -->
        <link href="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table.css" rel="stylesheet">
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table.js"></script>
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table-mobile.js"></script>

        <!-- https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use -->
        <link href="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/all.css" rel="stylesheet">

        <!-- https://moment.github.io/luxon/ -->
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/luxon.js"></script>

        <!-- http://docs.mathjax.org/ -->
        <!-- https://www.jsdelivr.com/package/npm/mathjax?path=es5 -->
        <script crossorigin="anonymous" integrity="sha256-+nfSJ1LiSvANSK3wvi6FjM+oFwoIQvURU1frozp5z6o=" src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/tex-chtml.js"></script><style type="text/css">.CtxtMenu_InfoClose {  top:.2em; right:.2em;}
.CtxtMenu_InfoContent {  overflow:auto; text-align:left; font-size:80%;  padding:.4em .6em; border:1px inset; margin:1em 0px;  max-height:20em; max-width:30em; background-color:#EEEEEE;  white-space:normal;}
.CtxtMenu_Info.CtxtMenu_MousePost {outline:none;}
.CtxtMenu_Info {  position:fixed; left:50%; width:auto; text-align:center;  border:3px outset; padding:1em 2em; background-color:#DDDDDD;  color:black;  cursor:default; font-family:message-box; font-size:120%;  font-style:normal; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 15px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius:15px;               /* Safari and Chrome */  -moz-border-radius:15px;                  /* Firefox */  -khtml-border-radius:15px;                /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color="gray", Positive="true"); /* IE */}
</style><style type="text/css">.CtxtMenu_MenuClose {  position:absolute;  cursor:pointer;  display:inline-block;  border:2px solid #AAA;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  font-family: "Courier New", Courier;  font-size:24px;  color:#F0F0F0}
.CtxtMenu_MenuClose span {  display:block; background-color:#AAA; border:1.5px solid;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  line-height:0;  padding:8px 0 6px     /* may need to be browser-specific */}
.CtxtMenu_MenuClose:hover {  color:white!important;  border:2px solid #CCC!important}
.CtxtMenu_MenuClose:hover span {  background-color:#CCC!important}
.CtxtMenu_MenuClose:hover:focus {  outline:none}
</style><style type="text/css">.CtxtMenu_Menu {  position:absolute;  background-color:white;  color:black;  width:auto; padding:5px 0px;  border:1px solid #CCCCCC; margin:0; cursor:default;  font: menu; text-align:left; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 5px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius: 5px;             /* Safari and Chrome */  -moz-border-radius: 5px;                /* Firefox */  -khtml-border-radius: 5px;              /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */}
.CtxtMenu_MenuItem {  padding: 1px 2em;  background:transparent;}
.CtxtMenu_MenuArrow {  position:absolute; right:.5em; padding-top:.25em; color:#666666;  font-family: null; font-size: .75em}
.CtxtMenu_MenuActive .CtxtMenu_MenuArrow {color:white}
.CtxtMenu_MenuArrow.CtxtMenu_RTL {left:.5em; right:auto}
.CtxtMenu_MenuCheck {  position:absolute; left:.7em;  font-family: null}
.CtxtMenu_MenuCheck.CtxtMenu_RTL { right:.7em; left:auto }
.CtxtMenu_MenuRadioCheck {  position:absolute; left: .7em;}
.CtxtMenu_MenuRadioCheck.CtxtMenu_RTL {  right: .7em; left:auto}
.CtxtMenu_MenuInputBox {  padding-left: 1em; right:.5em; color:#666666;  font-family: null;}
.CtxtMenu_MenuInputBox.CtxtMenu_RTL {  left: .1em;}
.CtxtMenu_MenuComboBox {  left:.1em; padding-bottom:.5em;}
.CtxtMenu_MenuSlider {  left: .1em;}
.CtxtMenu_SliderValue {  position:absolute; right:.1em; padding-top:.25em; color:#333333;  font-size: .75em}
.CtxtMenu_SliderBar {  outline: none; background: #d3d3d3}
.CtxtMenu_MenuLabel {  padding: 1px 2em 3px 1.33em;  font-style:italic}
.CtxtMenu_MenuRule {  border-top: 1px solid #DDDDDD;  margin: 4px 3px;}
.CtxtMenu_MenuDisabled {  color:GrayText}
.CtxtMenu_MenuActive {  background-color: #606872;  color: white;}
.CtxtMenu_MenuDisabled:focus {  background-color: #E8E8E8}
.CtxtMenu_MenuLabel:focus {  background-color: #E8E8E8}
.CtxtMenu_ContextMenu:focus {  outline:none}
.CtxtMenu_ContextMenu .CtxtMenu_MenuItem:focus {  outline:none}
.CtxtMenu_SelectionMenu {  position:relative; float:left;  border-bottom: none; -webkit-box-shadow:none; -webkit-border-radius:0px; }
.CtxtMenu_SelectionItem {  padding-right: 1em;}
.CtxtMenu_Selection {  right: 40%; width:50%; }
.CtxtMenu_SelectionBox {  padding: 0em; max-height:20em; max-width: none;  background-color:#FFFFFF;}
.CtxtMenu_SelectionDivider {  clear: both; border-top: 2px solid #000000;}
.CtxtMenu_Menu .CtxtMenu_MenuClose {  top:-10px; left:-10px}
</style>

        <!-- https://github.com/verlok/vanilla-lazyload -->
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/intersection-observer.js"></script>
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/lazyload.js"></script>

        <!-- https://github.com/davidjbradshaw/iframe-resizer -->
        <!-- https://www.jsdelivr.com/package/npm/iframe-resizer?path=js -->
        <script crossorigin="anonymous" integrity="sha256-S8f0Q/V9VcfrqYgWo9EFS9zuDMdPTBMC+CBW0RjxQbs=" src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/iframeResizer.js"></script>

        <!-- https://github.com/scratchblocks/scratchblocks/releases -->
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/scratchblocks.js"></script><style><![CDATA[ .sb-label {
      font-family: Lucida Grande, Verdana, Arial, DejaVu Sans, sans-serif;
      font-weight: bold;
      fill: #fff;
      font-size: 10px;
      word-spacing: +1px;
    }

    .sb-obsolete { fill: #d42828; }
    .sb-motion { fill: #4a6cd4; }
    .sb-looks { fill: #8a55d7; }
    .sb-sound { fill: #bb42c3; }
    .sb-pen { fill: #0e9a6c;  }
    .sb-events { fill: #c88330; }
    .sb-control { fill: #e1a91a; }
    .sb-sensing { fill: #2ca5e2; }
    .sb-operators { fill: #5cb712; }
    .sb-variables { fill: #ee7d16; }
    .sb-list { fill: #cc5b22 }
    .sb-custom { fill: #632d99; }
    .sb-custom-arg { fill: #5947b1; }
    .sb-extension { fill: #4b4a60; }
    .sb-grey { fill: #969696; }

    .sb-bevel {
      filter: url(#bevelFilter);
    }

    .sb-input {
      filter: url(#inputBevelFilter);
    }
    .sb-input-number,
    .sb-input-string,
    .sb-input-number-dropdown {
      fill: #fff;
    }
    .sb-literal-number,
    .sb-literal-string,
    .sb-literal-number-dropdown,
    .sb-literal-dropdown {
      font-weight: normal;
      font-size: 9px;
      word-spacing: 0;
    }
    .sb-literal-number,
    .sb-literal-string,
    .sb-literal-number-dropdown {
      fill: #000;
    }

    .sb-darker {
      filter: url(#inputDarkFilter);
    }

    .sb-outline {
      stroke: #fff;
      stroke-opacity: 0.2;
      stroke-width: 2;
      fill: none;
    }

    .sb-define-hat-cap {
      stroke: #632d99;
      stroke-width: 1;
      fill: #8e2ec2;
    }

    .sb-comment {
      fill: #ffffa5;
      stroke: #d0d1d2;
      stroke-width: 1;
    }
    .sb-comment-line {
      fill: #ffff80;
    }
    .sb-comment-label {
      font-family: Helevetica, Arial, DejaVu Sans, sans-serif;
      font-weight: bold;
      fill: #5c5d5f;
      word-spacing: 0;
      font-size: 12px;
    }

    .sb-diff {
      fill: none;
      stroke: #000;
    }
    .sb-diff-ins {
      stroke-width: 2px;
    }
    .sb-diff-del {
      stroke-width: 3px;
    }
  ]]></style><style><![CDATA[ .sb3-label {
      font: 500 12pt Helevetica Neue, Helvetica, sans-serif;
      fill: #fff;
      word-spacing: +1pt;
    }

    .sb3-motion { fill: #4c97ff; stroke: #3373cc; }
    .sb3-motion-alt { fill: #4280d7; }
    .sb3-motion-dark { fill: #4c97ff; }
    .sb3-looks { fill: #9966ff; stroke: #774dcb; }
    .sb3-looks-alt { fill: #855cd6; }
    .sb3-looks-dark { fill: #bd42bd; }
    .sb3-sound { fill: #cf63cf; stroke: #bd42bd; }
    .sb3-sound-alt { fill: #c94fc9; }
    .sb3-sound-dark { fill: #bd42bd; }
    .sb3-control { fill: #ffab19; stroke: #cf8b17; }
    .sb3-control-alt { fill: #ec9c13; }
    .sb3-control-dark { fill: #cf8b17; }
    .sb3-events { fill: #ffbf00; stroke: #cc9900; }
    .sb3-events-alt { fill: #e6ac00; }
    .sb3-events-dark { fill: #cc9900; }
    .sb3-sensing { fill: #5cb1d6; stroke: #2e8eb8; }
    .sb3-sensing-alt { fill: #47a8d1; }
    .sb3-sensing-dark { fill: #2e8eb8; }
    .sb3-operators { fill: #59c059; stroke: #389438; }
    .sb3-operators-alt { fill: #46b946; }
    .sb3-operators-dark { fill: #389438; }
    .sb3-variables { fill: #ff8c1a; stroke: #db6e00; }
    .sb3-variables-alt { fill: #ff8000; }
    .sb3-variables-dark { fill: #db6e00; }
    .sb3-list { fill: #ff661a; stroke: #e64d00; }
    .sb3-list-alt { fill: #ff5500; }
    .sb3-list-dark { fill: #e64d00; }
    .sb3-custom { fill: #ff6680; stroke: #ff3355; }
    .sb3-custom-alt { fill: #ff4d6a; }
    .sb3-custom-dark { fill: #ff3355; }
    .sb3-custom-arg { fill: #ff6680; stroke: #ff3355; }

    /* extension blocks, e.g. pen */
    .sb3-extension { fill: #0fbd8c; stroke: #0b8e69; }
    .sb3-extension-alt { fill: #0da57a; }
    .sb3-extension-line { stroke: #0da57a; }
    .sb3-extension-dark { fill: #0b8e69; }

    /* obsolete colors: chosen by hand, indicates invalid blocks */
    .sb3-obsolete { fill: #ed4242; stroke: #ca2b2b; }
    .sb3-obsolete-alt { fill: #db3333; }
    .sb3-obsolete-dark { fill: #ca2b2b; }

    /* grey: special color from the Scratch 3.0 design mockups */
    .sb3-grey { fill: #bfbfbf; stroke: #909090; }
    .sb3-grey-alt { fill: #b2b2b2; }
    .sb3-grey-dark { fill: #909090; }

    .sb3-input-color {
      stroke: #fff;
    }

    .sb3-input-number,
    .sb3-input-string {
      fill: #fff;
    }
    .sb3-literal-number,
    .sb3-literal-string,
    .sb3-literal-number-dropdown,
    .sb3-literal-dropdown {
      word-spacing: 0;
    }
    .sb3-literal-number,
    .sb3-literal-string {
      fill: #575e75;
    }

    .sb3-comment {
      fill: #ffffa5;
      stroke: #d0d1d2;
      stroke-width: 1;
    }
    .sb3-comment-line {
      fill: #ffff80;
    }
    .sb3-comment-label {
      font: 400 12pt Helevetica Neue, Helvetica, sans-serif;
      fill: #000;
      word-spacing: 0;
    }

    .sb3-diff {
      fill: none;
      stroke: #000;
    }
    .sb3-diff-ins {
      stroke-width: 2px;
    }
    .sb3-diff-del {
      stroke-width: 3px;
    }
  ]]></style>

        

        <link href="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/page.css" rel="stylesheet">
        <link rel="stylesheet" href="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/css.css" media="all"><script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/jekyll-theme-cs50.js"></script>

        <script>
            window.CS50 = {
                local: {"day":"numeric","hour":"numeric","minute":"numeric","month":"long","timeZoneName":"short","weekday":"long","year":"numeric"},
                locale: "en",
                tz: "America/New_York"
            };
        </script>

        <title>Lecture 5 - CS50's Web Programming with Python and JavaScript</title>


    <style id="MJX-CHTML-styles">
mjx-container[jax="CHTML"] {
  line-height: 0;
}

mjx-container [space="1"] {
  margin-left: .111em;
}

mjx-container [space="2"] {
  margin-left: .167em;
}

mjx-container [space="3"] {
  margin-left: .222em;
}

mjx-container [space="4"] {
  margin-left: .278em;
}

mjx-container [space="5"] {
  margin-left: .333em;
}

mjx-container [rspace="1"] {
  margin-right: .111em;
}

mjx-container [rspace="2"] {
  margin-right: .167em;
}

mjx-container [rspace="3"] {
  margin-right: .222em;
}

mjx-container [rspace="4"] {
  margin-right: .278em;
}

mjx-container [rspace="5"] {
  margin-right: .333em;
}

mjx-container [size="s"] {
  font-size: 70.7%;
}

mjx-container [size="ss"] {
  font-size: 50%;
}

mjx-container [size="Tn"] {
  font-size: 60%;
}

mjx-container [size="sm"] {
  font-size: 85%;
}

mjx-container [size="lg"] {
  font-size: 120%;
}

mjx-container [size="Lg"] {
  font-size: 144%;
}

mjx-container [size="LG"] {
  font-size: 173%;
}

mjx-container [size="hg"] {
  font-size: 207%;
}

mjx-container [size="HG"] {
  font-size: 249%;
}

mjx-container [width="full"] {
  width: 100%;
}

mjx-box {
  display: inline-block;
}

mjx-block {
  display: block;
}

mjx-itable {
  display: inline-table;
}

mjx-row {
  display: table-row;
}

mjx-row > * {
  display: table-cell;
}

mjx-mtext {
  display: inline-block;
}

mjx-mstyle {
  display: inline-block;
}

mjx-merror {
  display: inline-block;
  color: red;
  background-color: yellow;
}

mjx-mphantom {
  visibility: hidden;
}

mjx-assistive-mml {
  position: absolute !important;
  top: 0px;
  left: 0px;
  clip: rect(1px, 1px, 1px, 1px);
  padding: 1px 0px 0px 0px !important;
  border: 0px !important;
  display: block !important;
  width: auto !important;
  overflow: hidden !important;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

mjx-assistive-mml[display="block"] {
  width: 100% !important;
}

mjx-c::before {
  display: block;
  width: 0;
}

.MJX-TEX {
  font-family: MJXZERO, MJXTEX;
}

.TEX-B {
  font-family: MJXZERO, MJXTEX-B;
}

.TEX-I {
  font-family: MJXZERO, MJXTEX-I;
}

.TEX-MI {
  font-family: MJXZERO, MJXTEX-MI;
}

.TEX-BI {
  font-family: MJXZERO, MJXTEX-BI;
}

.TEX-S1 {
  font-family: MJXZERO, MJXTEX-S1;
}

.TEX-S2 {
  font-family: MJXZERO, MJXTEX-S2;
}

.TEX-S3 {
  font-family: MJXZERO, MJXTEX-S3;
}

.TEX-S4 {
  font-family: MJXZERO, MJXTEX-S4;
}

.TEX-A {
  font-family: MJXZERO, MJXTEX-A;
}

.TEX-C {
  font-family: MJXZERO, MJXTEX-C;
}

.TEX-CB {
  font-family: MJXZERO, MJXTEX-CB;
}

.TEX-FR {
  font-family: MJXZERO, MJXTEX-FR;
}

.TEX-FRB {
  font-family: MJXZERO, MJXTEX-FRB;
}

.TEX-SS {
  font-family: MJXZERO, MJXTEX-SS;
}

.TEX-SSB {
  font-family: MJXZERO, MJXTEX-SSB;
}

.TEX-SSI {
  font-family: MJXZERO, MJXTEX-SSI;
}

.TEX-SC {
  font-family: MJXZERO, MJXTEX-SC;
}

.TEX-T {
  font-family: MJXZERO, MJXTEX-T;
}

.TEX-V {
  font-family: MJXZERO, MJXTEX-V;
}

.TEX-VB {
  font-family: MJXZERO, MJXTEX-VB;
}

mjx-stretchy-v mjx-c, mjx-stretchy-h mjx-c {
  font-family: MJXZERO, MJXTEX-S1, MJXTEX-S4, MJXTEX, MJXTEX-A ! important;
}

@font-face /* 0 */ {
  font-family: MJXZERO;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff") format("woff");
}

@font-face /* 1 */ {
  font-family: MJXTEX;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff") format("woff");
}

@font-face /* 2 */ {
  font-family: MJXTEX-B;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Bold.woff") format("woff");
}

@font-face /* 3 */ {
  font-family: MJXTEX-I;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff") format("woff");
}

@font-face /* 4 */ {
  font-family: MJXTEX-MI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Italic.woff") format("woff");
}

@font-face /* 5 */ {
  font-family: MJXTEX-BI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Math-BoldItalic.woff") format("woff");
}

@font-face /* 6 */ {
  font-family: MJXTEX-S1;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff") format("woff");
}

@font-face /* 7 */ {
  font-family: MJXTEX-S2;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size2-Regular.woff") format("woff");
}

@font-face /* 8 */ {
  font-family: MJXTEX-S3;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size3-Regular.woff") format("woff");
}

@font-face /* 9 */ {
  font-family: MJXTEX-S4;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size4-Regular.woff") format("woff");
}

@font-face /* 10 */ {
  font-family: MJXTEX-A;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_AMS-Regular.woff") format("woff");
}

@font-face /* 11 */ {
  font-family: MJXTEX-C;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Regular.woff") format("woff");
}

@font-face /* 12 */ {
  font-family: MJXTEX-CB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Bold.woff") format("woff");
}

@font-face /* 13 */ {
  font-family: MJXTEX-FR;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Regular.woff") format("woff");
}

@font-face /* 14 */ {
  font-family: MJXTEX-FRB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Bold.woff") format("woff");
}

@font-face /* 15 */ {
  font-family: MJXTEX-SS;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Regular.woff") format("woff");
}

@font-face /* 16 */ {
  font-family: MJXTEX-SSB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Bold.woff") format("woff");
}

@font-face /* 17 */ {
  font-family: MJXTEX-SSI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Italic.woff") format("woff");
}

@font-face /* 18 */ {
  font-family: MJXTEX-SC;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Script-Regular.woff") format("woff");
}

@font-face /* 19 */ {
  font-family: MJXTEX-T;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Typewriter-Regular.woff") format("woff");
}

@font-face /* 20 */ {
  font-family: MJXTEX-V;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Regular.woff") format("woff");
}

@font-face /* 21 */ {
  font-family: MJXTEX-VB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Bold.woff") format("woff");
}
</style></head>

    <body class="">

        <div class="alert fixed-top mb-0 rounded-0 shadow alert-success alert-dismissible" data-alert="success dismissible" data-hash="edc24fffed7a3a9ad8c189ef5e2aca41" id="alert" role="alert">
            <button aria-label="Close" class="btn-close" data-bs-dismiss="alert" type="button"></button><p>Interested in <a href="https://cs50.harvard.edu/web/2020/#how-to-take-this-course" class="alert-link">a verified certificate, a professional certificate, or transfer credit and accreditation</a>?
And get vaccinated (as soon as it’s available to you). 💉 <a href="https://www.who.int/news-room/feature-stories/detail/getting-the-covid-19-vaccine" class="alert-link">Here’s why</a>. <a href="https://www.google.com/search?q=covid-19+vaccine+finder" class="alert-link">Here’s how</a>.</p></div>
        

        <div class="container-fluid">

            <div class="row">

                <aside class="col-md" style="height: 513.667px; top: 81.3333px;">
 
                    <header><h1 data-id="cs50s-web-programming-with-python-and-javascript"><a href="https://cs50.harvard.edu/web/2020/">CS50’s Web Programming with Python and JavaScript</a></h1>

<p>OpenCourseWare</p>

<p><a class="pr-1 small" href="https://cs50.harvard.edu/donate">Donate<i aria-hidden="true" class="fas fa-external-link-alt ps-2"></i></a></p>

<p><a href="https://brianyu.me/">Brian Yu</a><br>
<a href="mailto:brian@cs.harvard.edu">brian@cs.harvard.edu</a></p>

<p><a href="https://cs.harvard.edu/malan/">David J. Malan</a>
<br>
<a href="mailto:malan@harvard.edu">malan@harvard.edu</a>
<br>
<a class="mr-1" href="https://www.facebook.com/dmalan"><i aria-hidden="true" class="fab fa-facebook-f" title="Facebook"></i><span class="sr-only">Facebook</span></a>
<a class="mr-1" href="https://github.com/dmalan"><i aria-hidden="true" class="fab fa-github" title="GitHub"></i><span class="sr-only">GitHub</span></a>
<a class="mr-1" href="https://www.instagram.com/davidjmalan/"><i aria-hidden="true" class="fab fa-instagram" title="Instagram"></i><span class="sr-only">Instagram</span></a>
<a class="mr-1" href="https://www.linkedin.com/in/malan/"><i aria-hidden="true" class="fab fa-linkedin" title="LinkedIn"></i><span class="sr-only">LinkedIn</span></a>
<a class="mr-1" href="https://orcid.org/0000-0001-5338-2522"><i aria-hidden="true" class="fab fa-orcid" title="ORCID"></i><span class="sr-only">ORCID</span></a>
<a class="mr-1" href="https://www.quora.com/profile/David-J-Malan"><i aria-hidden="true" class="fab fa-quora" title="Quora"></i><span class="sr-only">Quora</span></a>
<a class="mr-1" href="https://www.reddit.com/user/davidjmalan"><i aria-hidden="true" class="fab fa-reddit-alien" title="Reddit"></i><span class="sr-only">Reddit</span></a>
<a class="mr-1" href="https://www.tiktok.com/@davidjmalan"><i aria-hidden="true" class="fab fa-tiktok" title="TikTok"></i><span class="sr-only">Twitter</span></a>
<a class="mr-1" href="https://twitter.com/davidjmalan"><i aria-hidden="true" class="fab fa-twitter" title="Twitter"></i><span class="sr-only">Twitter</span></a></p></header>

                    

                    <button aria-controls="nav" aria-expanded="false" class="btn btn-sm collapsed d-md-none" data-bs-target="aside &gt; nav" data-bs-toggle="collapse">
                        Menu
                    </button>

                    <nav class="collapse d-md-block" id="nav"><hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/movie/">🍿 CS50x Movie Night 2022</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/puzzles/"><i class="fas fa-puzzle-piece pe-2"></i>CS50x Puzzle Day 2022</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/prepare/"><i class="fas fa-book pe-2"></i>How to Prepare for Technical Interviews</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.ly/zoom"><i class="fas fa-video pe-2"></i>Zoom Meetings</a></li>
</ul>

<hr>

<ol start="0">
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/0/">HTML, CSS</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/1/">Git</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/2/">Python</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/3/">Django</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/4/">SQL, Models, and Migrations</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/5/">JavaScript</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/6/">User Interfaces</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/7/">Testing, CI/CD</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/8/">Scalability and Security</a></li>
</ol>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/honesty/">Academic Honesty</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/certificate/">CS50 Certificate</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/faqs/">FAQs</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.me/cs50w">Gradebook</a></li>
</ul>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed">Ed Discussion</a> for Q&amp;A</li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://us.edstem.org/quickstart/ed-discussion.pdf">Quick Start Guide</a></li>
</ul>

<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/web">edX</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://itunes.apple.com/us/course/id1505432709">iTunes U</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.youtube.com/playlist?list=PLhQjrBD2T380xvFSUmToMMzERZ3qB5Ueu">YouTube</a></li>
</ul>

<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.noticeable.news/">Changelog</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.statuspage.io/">Status Page</a></li>
</ul>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/communities/"><strong>Communities</strong></a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.clubhouse.com/club/cs50">Clubhouse</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://discord.gg/cs50">Discord</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed">Ed</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/groups/cs50/">Facebook Group</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/cs50/">Facebook Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://github.com/cs50">GitHub</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://gitter.im/cs50/x">Gitter</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://instagram.com/cs50">Instagram</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/groups/7437240/">LinkedIn Group</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/school/CS50/">LinkedIn Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.medium.com/">Medium</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.quora.com/topic/CS50">Quora</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.reddit.com/r/cs50/">Reddit</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/slack">Slack</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.snapchat.com/add/cs50">Snapchat</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://soundcloud.com/cs50">SoundCloud</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.stackexchange.com/">Stack Exchange</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.tiktok.com/@cs50">TikTok</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://twitter.com/cs50">Twitter</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://www.youtube.com/subscription_center?add_user=cs50tv">YouTube</a></li>
</ul>

<hr>

<p><a href="https://cs50.harvardshop.com/"><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/GGMdcKt.png" alt="Harvard Shop"></a></p>

<hr>

<p><a href="https://cs50.harvard.edu/web/2020/license/" class="small"><i class="fab fa-creative-commons me-1"></i>License</a></p></nav>

                    <footer></footer>

                </aside>

                <main class="col-md" style="margin-bottom: 0px; margin-top: 81.3333px;">

                    <a data-id="" id="lecture-5" style="top: -81.3333px;"></a><h1 class="no_toc"><a data-id="" href="#lecture-5">Lecture 5</a></h1>

<ul id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
  <li><a href="#javascript" id="markdown-toc-javascript">JavaScript</a></li>
  <li><a href="#events" id="markdown-toc-events">Events</a></li>
  <li><a href="#variables" id="markdown-toc-variables">Variables</a></li>
  <li><a href="#queryselector" id="markdown-toc-queryselector"><code class="language-plaintext highlighter-rouge">querySelector</code></a></li>
  <li><a href="#dom-manipulation" id="markdown-toc-dom-manipulation">DOM Manipulation</a>    <ul>
      <li><a href="#javascript-console" id="markdown-toc-javascript-console">JavaScript Console</a></li>
      <li><a href="#arrow-functions" id="markdown-toc-arrow-functions">Arrow Functions</a></li>
      <li><a href="#todo-list" id="markdown-toc-todo-list">TODO List</a></li>
    </ul>
  </li>
  <li><a href="#intervals" id="markdown-toc-intervals">Intervals</a></li>
  <li><a href="#local-storage" id="markdown-toc-local-storage">Local Storage</a></li>
  <li><a href="#apis" id="markdown-toc-apis">APIs</a>    <ul>
      <li><a href="#javascript-objects" id="markdown-toc-javascript-objects">JavaScript Objects</a></li>
      <li><a href="#currency-exchange" id="markdown-toc-currency-exchange">Currency Exchange</a></li>
    </ul>
  </li>
</ul>

<a data-id="" id="introduction" style="top: -81.3333px;"></a><h2><a data-id="" href="#introduction">Introduction</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>So
 far, we’ve discussed how to build simple web pages using HTML and CSS, 
and how to use Git and GitHub in order to keep track of changes to our 
code and collaborate with others. We also familiarized ourselves with 
the Python programming language, started using Django to create web 
applications, and learned how to use Django models to store information 
in our sites.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Today, we’ll introduce a new programming language: JavaScript.</li>
</ul>

<a data-id="" id="javascript" style="top: -81.3333px;"></a><h2><a data-id="" href="#javascript">JavaScript</a></h2>

<p>Let’s begin by revisiting a diagram from a couple of lectures ago:</p>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/client_server.png" alt="Client Server Diagram"></p>

<p>Recall that in most online interactions, we have a client/user that 
sends an HTTP Request to a server, which sends back an HTTP Response. 
All of the Python code we’ve written so far using Django has been 
running on a server. JavaScript will allow us to run code on the client 
side, meaning no interaction with the server is necessary while it’s 
running, allowing our websites to become much more interactive.</p>

<p>In order to add some JavaScript to our page, we can add a pair of <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tags somewhere in our HTML page. We use <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code>
 tags to signal to the browser that anything we write in between the two
 tags is JavaScript code we wish to execute when a user visits our site.
 Our first program might look something like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, world!</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">alert</code> 
function in JavaScript displays a message to the user which they can 
then dismiss. To show where this would fit into an actual HTML document,
 here’s an example of a simple page with some JavaScript:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="dl">"</span><span class="s2">en</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="o">&lt;</span><span class="sr">/title</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
            <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, world!</span><span class="dl">'</span><span class="p">);</span>
        <span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/head</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="o">!&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span></code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/alert0.png" alt="alert"></p>

<a data-id="" id="events" style="top: -81.3333px;"></a><h2><a data-id="" href="#events">Events</a></h2>

<dl>
  <dt>One feature of JavaScript that makes it helpful for web programming is that it supports <a href="https://medium.com/@vsvaibhav2016/introduction-to-event-driven-programming-28161b79c223">Event-Driven Programming</a>.</dt>
  <dd>Event-Driven Programming is a programming paradigm that centers 
around the detection of events, and actions that should be taken when an
 event is detected.</dd>
</dl>

<p>An event can be almost anything including a button being clicked, the
 cursor being moved, a response being typed, or a page being loaded. 
Just about everything a user does to interact with a web page can be 
thought of as an event. In JavaScript, we use <a href="https://www.w3schools.com/js/js_htmldom_eventlistener.asp">Event Listeners</a> that wait for certain events to occur, and then execute some code.</p>

<p>Let’s begin by turning our JavaScript from above into a <a href="https://www.w3schools.com/js/js_functions.asp">function</a> called <code class="language-plaintext highlighter-rouge">hello</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">hello</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, world!</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, let’s work on running this function whenever a button is 
clicked. To do this, we’ll create an HTML button in our page with an <code class="language-plaintext highlighter-rouge">onclick</code> attribute, which gives the browser instructions for what should happen when the button is clicked:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"hello()"</span><span class="nt">&gt;</span>Click Here<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div>

<p>These changes allow us to wait to run parts of our JavaScript code until a certain event occurs.</p>

<a data-id="" id="variables" style="top: -81.3333px;"></a><h2><a data-id="" href="#variables">Variables</a></h2>

<p>JavaScript is a programming language just like Python, C, or any 
other language you’ve worked with before, meaning it has many of the 
same features as other languages including variables. There are three 
keywords we can use to assign values in JavaScript:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">var</code>: used to define a variable globally</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">let</code>: used to define a variable that is limited in scope to the current block such as a function or loop</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">const</code>: used to define a value that will not change</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
</code></pre></div></div>

<p>For an example of how we can use a variable, let’s take a look at a page that keeps track of a counter:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Count<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;script&gt;</span>
            <span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kd">function</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
                <span class="nx">alert</span><span class="p">(</span><span class="nx">counter</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="nt">&lt;/script&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Hello!<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"count()"</span><span class="nt">&gt;</span>Count<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/count.gif" alt="counting"></p>

<a data-id="" id="queryselector" style="top: -81.3333px;"></a><h2><a data-id="" href="#queryselector"><code class="language-plaintext highlighter-rouge">querySelector</code></a></h2>

<p>In addition to allowing us to display messages through alerts, 
JavaScript also allows us to change elements on the page. In order to do
 this, we must first introduce a function called <code class="language-plaintext highlighter-rouge">document.querySelector</code>. This function searches for and returns elements of the DOM. For example, we would use:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">heading</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>to extract a heading. Then, to manipulate the element we’ve recently found, we can change its <code class="language-plaintext highlighter-rouge">innerHTML</code> property:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">heading</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`Goodbye!`</span><span class="p">;</span>
</code></pre></div></div>

<p>Just as in Python, we can also take advantage of <a href="https://www.w3schools.com/js/js_if_else.asp">conditions</a> in JavaScript. For example, let’s say rather than always changing our header to <code class="language-plaintext highlighter-rouge">Goodbye!</code>, we wish to toggle back and forth between <code class="language-plaintext highlighter-rouge">Hello!</code> and <code class="language-plaintext highlighter-rouge">Goodbye!</code>. Our page might then look something like the one below. Notice that in JavaScript, we use <code class="language-plaintext highlighter-rouge">===</code> as a stronger comparison between two items which also checks that the objects are of the same type. We typically want to use <code class="language-plaintext highlighter-rouge">===</code> whenever possible.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Count<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;script&gt;</span>
            <span class="kd">function</span> <span class="nx">hello</span><span class="p">()</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">header</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">header</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">Hello!</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">header</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Goodbye!</span><span class="dl">'</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="p">{</span>
                    <span class="nx">header</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello!</span><span class="dl">'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="nt">&lt;/script&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Hello!<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"hello()"</span><span class="nt">&gt;</span>Click Here<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/toggle.gif" alt="toggle"></p>

<a data-id="" id="dom-manipulation" style="top: -81.3333px;"></a><h2><a data-id="" href="#dom-manipulation">DOM Manipulation</a></h2>

<p>Let’s use this idea of DOM manipulation to improve our counter page:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Count<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;script&gt;</span>
            <span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kd">function</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="nt">&lt;/script&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>0<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"count()"</span><span class="nt">&gt;</span>Count<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/count2.gif" alt="count 2"></p>

<p>We can make this page even more interesting by displaying an alert 
every time the counter gets to a multiple of ten. In this alert, we’ll 
want to format a string to customize the message, which in JavaScript we
 can do using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">template literals</a>. Template literals requre that there are backticks (<code class="language-plaintext highlighter-rouge">`</code>) around the entire expression and a $ and curly braces around any substitutions. For example, let’s change our count function</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">`Count is now </span><span class="p">${</span><span class="nx">counter</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/count3.gif" alt="count with alert"></p>

<p>Now, let’s look at some ways in which we can improve the design of 
this page. First, just as we try to avoid in-line styling with CSS, we 
want to avoid in-line JavaScript as much as possible. We can do this in 
our counter example by adding a line of script that changes the <code class="language-plaintext highlighter-rouge">onclick</code> attribute of a button on the page, and removing the <code class="language-plaintext highlighter-rouge">onclick</code> attribute from within the <code class="language-plaintext highlighter-rouge">button</code> tag.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>
</code></pre></div></div>

<p>One thing to notice about what we’ve just done is that we’re not calling the <code class="language-plaintext highlighter-rouge">count</code>
 function by adding parentheses afterward, but instead just naming the 
function. This specifies that we only wish to call this function when 
the button is clicked. This works because, like Python, JavaScript 
supports functional programming, so functions can be treated as values 
themselves.</p>

<p>The above change alone is not enough though, as we can see by inspecting the page and looking at our browser’s console:</p>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/error0.png" alt="error console"></p>

<p>This error came up because when JavaScript searched for an element using <code class="language-plaintext highlighter-rouge">document.querySelector('button')</code>,
 it didn’t find anything. This is because it takes a small bit of time 
for the page to load, and our JavaScript code ran before the button had 
been rendered. To account for this, we can specify that code will run 
only after the page has loaded using the <a href="https://www.w3schools.com/jsref/met_document_addeventlistener.asp">addEventListener</a> function. This function takes in two arguments:</p>
<ol>
  <li>An event to listen for (eg: <code class="language-plaintext highlighter-rouge">'click'</code>)</li>
  <li>A function to run when the event is detected (eg: <code class="language-plaintext highlighter-rouge">hello</code> from above)</li>
</ol>

<p>We can use the function to only run the code once all content has loaded:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Some code here</span>
<span class="p">});</span>
</code></pre></div></div>

<p>In the example above, we’ve used an <a href="https://www.w3schools.com/js/js_function_definition.asp">anonymous</a> function, which is a function that is never given a name. Putting all of this together, our JavaScript now looks like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">`Count is now </span><span class="p">${</span><span class="nx">counter</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Another way that we can improve our design is by moving our 
JavaScript into a separate file. The way we do this is very similar to 
how we put our CSS in a separate file for styling:</p>
<ol>
  <li>Write all of your JavaScript code in a separate file ending in <code class="language-plaintext highlighter-rouge">.js</code>, maybe <code class="language-plaintext highlighter-rouge">index.js</code>.</li>
  <li>Add a <code class="language-plaintext highlighter-rouge">src</code> attribute to the <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tag that points to this new file.</li>
</ol>

<p>For our counter page, we could have a file called <code class="language-plaintext highlighter-rouge">counter.html</code> that looks like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Count<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"counter.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>0<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;button&gt;</span>Count<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>And a file called <code class="language-plaintext highlighter-rouge">counter.js</code> that looks like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            
<span class="kd">function</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">`Count is now </span><span class="p">${</span><span class="nx">counter</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Having JavaScript in a separate file is useful for a number of reasons:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Visual appeal: Our individual HTML and JavaScript files become more readable.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Access among HTML files: Now we can have multiple HTML files that all share the same JavaScript.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Collaboration: We can now easily have one person work on the JavaScript while another works on HTML.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Importing: We are able to import JavaScript libraries that other people have already written. For example <a href="https://getbootstrap.com/docs/4.5/getting-started/introduction/#js">Bootstrap</a> has their own JavaScript library you can include to make your site more interactive.</li>
</ul>

<p>Let’s get started on another example of a page that can be a bit more
 interactive. Below, we’ll create a page where a user can type in their 
name to get a custom greeting.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Hello<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">).</span><span class="nx">onsubmit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#name</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
                <span class="nx">alert</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
            <span class="p">};</span>
        <span class="p">});</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;form&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">autofocus</span> <span class="na">id=</span><span class="s">"name"</span> <span class="na">placeholder=</span><span class="s">"Name"</span> <span class="na">type=</span><span class="s">"text"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/greet.gif" alt="Greeting Demo"></p>

<p>Some notes about the page above:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We use the <code class="language-plaintext highlighter-rouge">autofocus</code> field in the <code class="language-plaintext highlighter-rouge">name</code> input to indicate that the cursor should be set inside that input as soon as the page is loaded.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We use <code class="language-plaintext highlighter-rouge">#name</code> inside of <code class="language-plaintext highlighter-rouge">document.querySelector</code> to find an element with an <code class="language-plaintext highlighter-rouge">id</code> of <code class="language-plaintext highlighter-rouge">name</code>. We can use all the same selectors in this function as we could in CSS.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We use the <code class="language-plaintext highlighter-rouge">value</code> attribute of an input field to find what is currently typed in.</li>
</ul>

<p>We can do more than just add HTML to our page using JavaScript, we 
can also change the styling of a page! In the page below, we use buttons
 to change the color of our heading.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
     <span class="nt">&lt;title&gt;</span>Colors<span class="nt">&lt;/title&gt;</span>
     <span class="nt">&lt;script&gt;</span>
         <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">button</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">button</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#hello</span><span class="dl">"</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">button</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">});</span>
         <span class="p">});</span>
     <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"hello"</span><span class="nt">&gt;</span>Hello<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">data-color=</span><span class="s">"red"</span><span class="nt">&gt;</span>Red<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">data-color=</span><span class="s">"blue"</span><span class="nt">&gt;</span>Blue<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">data-color=</span><span class="s">"green"</span><span class="nt">&gt;</span>Green<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/colors.gif" alt="Color demo"></p>

<p>Some notes on the page above:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We change the style of an element using the <code class="language-plaintext highlighter-rouge">style.SOMETHING</code> attribute.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We use the <code class="language-plaintext highlighter-rouge">data-SOMETHING</code> attribute to assign data to an HTML element. We can later access that data in JavaScript using the element’s <code class="language-plaintext highlighter-rouge">dataset</code> property.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We use the <code class="language-plaintext highlighter-rouge">querySelectorAll</code> function to get an <a href="https://www.w3schools.com/js/js_htmldom_nodelist.asp">Node List</a> (similar to a Python list or a JavaScript <a href="https://www.w3schools.com/js/js_arrays.asp">array</a>) with all elements that match the query.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The <a href="https://www.w3schools.com/jsref/jsref_foreach.asp">forEach</a> function in JavaScript takes in another function, and applies that function to each element in a list or array.</li>
</ul>

<a data-id="" id="javascript-console" style="top: -81.3333px;"></a><h3><a data-id="" href="#javascript-console">JavaScript Console</a></h3>

<p>The console is a useful tool for testing out small bits of code and 
debugging. You can write and run JavaScript code in the console, which 
can be found by inspecting element in your web browser and then clicking
 <code class="language-plaintext highlighter-rouge">console</code>. (The
 exact process may change frome browser to browser.) One useful tool for
 debugging is printing to the console, which you can do using the <code class="language-plaintext highlighter-rouge">console.log</code> function. For example, in the <code class="language-plaintext highlighter-rouge">colors.html</code> page above, I can add the following line:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">));</span>
</code></pre></div></div>

<p>Which gives us this in the console:</p>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/consoleList.png" alt="node list"></p>

<a data-id="" id="arrow-functions" style="top: -81.3333px;"></a><h3><a data-id="" href="#arrow-functions">Arrow Functions</a></h3>

<p>In addition to the traditional function notation we’ve seen already, JavaScript now gives us the ability to use <a href="https://www.w3schools.com/js/js_arrow_function.asp">Arrow Functions</a> where we have an input (or parentheses when there’s no input) followed by <code class="language-plaintext highlighter-rouge">=&gt;</code> followed by some code to be run. For example, we can alter our script above to use an anonymous arrow function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">button</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">button</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#hello</span><span class="dl">"</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">button</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>We can also have named functions that use arrows, as in this rewriting of the count function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">count</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">counter</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">`Count is now </span><span class="p">${</span><span class="nx">counter</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To get an idea about some other events we can use, let’s see how we 
can implement our color switcher using a dropdown menu instead of three 
separate buttons. We can detect changes in a <code class="language-plaintext highlighter-rouge">select</code> element using the <code class="language-plaintext highlighter-rouge">onchange</code> attribute. In JavaScript, <a href="https://www.w3schools.com/js/js_this.asp">this</a> is a keyword that changes based on the context in which it’s used. In the case of an event handler, <code class="language-plaintext highlighter-rouge">this</code> refers to the object that triggered the event.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Colors<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;script&gt;</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">select</span><span class="dl">'</span><span class="p">).</span><span class="nx">onchange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#hello</span><span class="dl">'</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">});</span>
        <span class="nt">&lt;/script&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"hello"</span><span class="nt">&gt;</span>Hello<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;select&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">"black"</span><span class="nt">&gt;</span>Black<span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">"red"</span><span class="nt">&gt;</span>Red<span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">"blue"</span><span class="nt">&gt;</span>Blue<span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">"green"</span><span class="nt">&gt;</span>Green<span class="nt">&lt;/option&gt;</span>
        <span class="nt">&lt;/select&gt;</span>

    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/colors2.gif" alt="colors with dropdown"></p>

<p>There are many other <a href="https://www.w3schools.com/js/js_events.asp">events</a> we can detect in JavaScript including the common ones below:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">onclick</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">onmouseover</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">onkeydown</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">onkeyup</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">onload</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">onblur</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>…</li>
</ul>

<a data-id="" id="todo-list" style="top: -81.3333px;"></a><h3><a data-id="" href="#todo-list">TODO List</a></h3>

<p>To put together a few of the things we’ve learned in this lecture, 
let’s work on making a TODO list entirely in JavaScript. We’ll start by 
writing the HTML layout of the page. Notice below how we leave space for
 an unorderd list, but we dont yet add anything to it. Also notice that 
we add a link to <code class="language-plaintext highlighter-rouge">tasks.js</code> where we’ll write our JavaScript.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Tasks<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"tasks.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Tasks<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">"tasks"</span><span class="nt">&gt;&lt;/ul&gt;</span>
        <span class="nt">&lt;form&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"task"</span> <span class="na">placeholder = </span><span class="s">"New Task"</span> <span class="na">type=</span><span class="s">"text"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"submit"</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Now, here’s our code which we can keep in <code class="language-plaintext highlighter-rouge">tasks.js</code>. A few notes on what you’ll see below:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>This
 code is slightly different from the code in lecture. Here, we only 
query for our submit button and input task field once in the beginning 
and store those two values in the variables <code class="language-plaintext highlighter-rouge">submit</code> and <code class="language-plaintext highlighter-rouge">newTask</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We can enable/disable a button by setting its <code class="language-plaintext highlighter-rouge">disabled</code> attribute to <code class="language-plaintext highlighter-rouge">false</code>/<code class="language-plaintext highlighter-rouge">true</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In JavaScript, we use <code class="language-plaintext highlighter-rouge">.length</code> to find the length of objects such as strings and arrays.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>At the end of the script, we add the line <code class="language-plaintext highlighter-rouge">return false</code>. This prevents the default submission of the form which involves either reloading the current page or redirecting to a new one.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In JavaScript, we can create HTML elements using the <a href="https://www.w3schools.com/jsref/met_document_createelement.asp">createElement</a> function. We can then add those elements to the DOM using the <code class="language-plaintext highlighter-rouge">append</code> function.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Wait for page to load</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="c1">// Select the submit button and input to be used later</span>
    <span class="kd">const</span> <span class="nx">submit</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#submit</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">newTask</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#task</span><span class="dl">'</span><span class="p">);</span>

    <span class="c1">// Disable submit button by default:</span>
    <span class="nx">submit</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

    <span class="c1">// Listen for input to be typed into the input field</span>
    <span class="nx">newTask</span><span class="p">.</span><span class="nx">onkeyup</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">newTask</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">submit</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="nx">submit</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Listen for submission of form</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">).</span><span class="nx">onsubmit</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

        <span class="c1">// Find the task the user just submitted</span>
        <span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="nx">newTask</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

        <span class="c1">// Create a list item for the new task and add the task to it</span>
        <span class="kd">const</span> <span class="nx">li</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">li</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">task</span><span class="p">;</span>

        <span class="c1">// Add new element to our unordered list:</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#tasks</span><span class="dl">'</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">li</span><span class="p">);</span>

        <span class="c1">// Clear out input field:</span>
        <span class="nx">newTask</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>

        <span class="c1">// Disable the submit button again:</span>
        <span class="nx">submit</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

        <span class="c1">// Stop form from submitting</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/tasks.gif" alt="Tasks demo"></p>

<a data-id="" id="intervals" style="top: -81.3333px;"></a><h2><a data-id="" href="#intervals">Intervals</a></h2>

<p>In addition to specifying that functions run when an event is 
triggered, we can also set functions to run after a set amount of time. 
For example, let’s return to our counter page’s script, and add an 
interval so even if the user doesn’t click anything, the counter 
increments every second. To do this, we use the <a href="https://www.w3schools.com/jsref/met_win_setinterval.asp">setInterval</a> function, which takes as argument a function to be run, and a time (in milliseconds) between function runs.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            
<span class="kd">function</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>

    <span class="nx">setInterval</span><span class="p">(</span><span class="nx">count</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/count4.gif" alt="count auto"></p>

<a data-id="" id="local-storage" style="top: -81.3333px;"></a><h2><a data-id="" href="#local-storage">Local Storage</a></h2>

<p>One thing to notice about all of our sites so far is that every time 
we reload the page, all of our information is lost. The heading color 
goes back to black, the counter goes back to 0, and all of the tasks are
 erased. Sometimes this is what we intend, but other time’s we’ll want 
to be able to store information that we can use when a user returns to 
the site.</p>

<p>One way we can do this is by using <a href="https://www.w3schools.com/jsref/prop_win_localstorage.asp">Local Storage</a>,
 or storing information on the user’s web browser that we can access 
later. This information is stored as a set of key-value pairs, almost 
like a Python dictionary. In order to use local storage, we’ll employ 
two key functions:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">localStorage.getItem(key)</code>: This function searches for an entry in local storage with a given key, and returns the value associated with that key.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">localStorage.setItem(key, value)</code>: This function sets and entry in local storage, associating the key with a new vlaue.</li>
</ul>

<p>Let’s look at how we can use these new functions to update our counter! In the code below,</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Check if there is already a vlaue in local storage</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">counter</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>

    <span class="c1">// If not, set the counter to 0 in local storage</span>
    <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">counter</span><span class="dl">'</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
            
<span class="kd">function</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Retrieve counter value from local storage</span>
    <span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">counter</span><span class="dl">'</span><span class="p">);</span>

    <span class="c1">// update counter</span>
    <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">;</span>

    <span class="c1">// Store counter in local storage</span>
    <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">counter</span><span class="dl">'</span><span class="p">,</span> <span class="nx">counter</span><span class="p">);</span>
<span class="p">}</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Set heading to the current value inside local storage</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">'</span><span class="s1">counter</span><span class="dl">'</span><span class="p">);</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<a data-id="" id="apis" style="top: -81.3333px;"></a><h2><a data-id="" href="#apis">APIs</a></h2>

<a data-id="" id="javascript-objects" style="top: -81.3333px;"></a><h3><a data-id="" href="#javascript-objects">JavaScript Objects</a></h3>

<p>A <a href="https://www.w3schools.com/js/js_objects.asp">JavaScript Object</a>
 is very similar to a Python dictionary, as it allows us to store 
key-value pairs. For example, I could create a JavaScript Object 
representing Harry Potter:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">first</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Harry</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">last</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Potter</span><span class="dl">'</span>
<span class="p">};</span>
</code></pre></div></div>

<p>I can then access or change parts of this object using either bracket or dot notation:</p>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/console.png" alt="Harry Potter"></p>

<dl>
  <dt>One way in which JavaScript Objects are really useful is in transferring data from one site to another, particularly when using <a href="https://www.mulesoft.com/resources/api/what-is-an-api">APIs</a></dt>
  <dd>
    <p>An API, or Application Programming Interface, is a structured form communication between two different applications.</p>
  </dd>
</dl>

<p>For example, we may want our application to get information from 
Google Maps, Amazon, or some weather service. We can do this by making 
calls to a service’s API, which will return structured data to us, often
 in <a href="https://www.w3schools.com/js/js_json_intro.asp">JSON</a> (JavaScript Object Notation) form. For example, a flight in JSON form might look like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"origin"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New York"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"destination"</span><span class="p">:</span><span class="w"> </span><span class="s2">"London"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"duration"</span><span class="p">:</span><span class="w"> </span><span class="mi">415</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The values within a JSON do not have to just be strings and numbers 
as in the example above. We can also store lists, or even other 
JavaScript Objects:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"origin"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New York"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"code"</span><span class="p">:</span><span class="w"> </span><span class="s2">"JFK"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"destination"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"London"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"code"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LHR"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"duration"</span><span class="p">:</span><span class="w"> </span><span class="mi">415</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<a data-id="" id="currency-exchange" style="top: -81.3333px;"></a><h3><a data-id="" href="#currency-exchange">Currency Exchange</a></h3>

<p>To show how we can use APIs in our applications, let’s work on 
building an application where we can find exchange rates between two 
currencies. Throughout the exercise, we’ll be using the <a href="https://exchangeratesapi.io/">European Central Bank’s Exchange Rate API</a>.
 By visiting their website, you’ll see the API’s documentation, which is
 generally a good place to start when you wish to use an API. We can 
test this api by visiting the URL: <a href="https://api.exchangeratesapi.io/latest?base=USD">https://api.exchangeratesapi.io/latest?base=USD</a>.
 When you visit this page, you’ll see the exchange rate between the U.S.
 Dollar and many other currencies, written in JSON form. You can also 
change the GET parameter in the URL from <code class="language-plaintext highlighter-rouge">USD</code> to any other currency code to change the rates you get.</p>

<p>Let’s take a look at how to implement this API into an application by creating a new HTML file called <code class="language-plaintext highlighter-rouge">currency.html</code> and link it to a JavaScript file but leave the body empty:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Currency Exchange<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"currency.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Now, we’ll use something called <a href="https://www.w3schools.com/js/js_ajax_intro.asp">AJAX</a>,
 or Asynchronous JavaScript And XML, which allows us to access 
information from external pages even after our page has loaded. In order
 to do this, we’ll use the <a href="https://javascript.info/fetch">fetch</a> function which will allow us to send an HTTP request. The <code class="language-plaintext highlighter-rouge">fetch</code> function returns a <a href="https://web.dev/promises/">promise</a>.
 We won’t talk about the details of what a promise is here, but we can 
think of it as a value that will come through at some point, but not 
necessarily right away. We deal with promises by giving them a <code class="language-plaintext highlighter-rouge">.then</code> attribute describing what should be done when we get a <code class="language-plaintext highlighter-rouge">response</code>. The code snippet below will log our response to the console.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Send a GET request to the URL</span>
    <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://api.exchangeratesapi.io/latest?base=USD</span><span class="dl">'</span><span class="p">)</span>
    <span class="c1">// Put response into json form</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// Log data to the console</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/curr_log.png" alt="Currency log"></p>

<p>One important point about the above code is that the argument of <code class="language-plaintext highlighter-rouge">.then</code> is always a function. Although it seems we are creating the variables <code class="language-plaintext highlighter-rouge">response</code> and and <code class="language-plaintext highlighter-rouge">data</code>, those variables are just the parameters of two anonymous functions.</p>

<p>Rather than simply logging this data, we can use JavaScript to display a message to the screen, as in the code below:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Send a GET request to the URL</span>
    <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://api.exchangeratesapi.io/latest?base=USD</span><span class="dl">'</span><span class="p">)</span>
    <span class="c1">// Put response into json form</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>

        <span class="c1">// Get rate from data</span>
        <span class="kd">const</span> <span class="nx">rate</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">rates</span><span class="p">.</span><span class="nx">EUR</span><span class="p">;</span>

        <span class="c1">// Display message on the screen</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">body</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`1 USD is equal to </span><span class="p">${</span><span class="nx">rate</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">3</span><span class="p">)}</span><span class="s2"> EUR.`</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/exhange.png" alt="Currency"></p>

<p>Now, let’s make the site a bit more interactive by allowing the user 
to choose which currency they would like to see. We’ll start by altering
 our HTML to allow the user to input a currency:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Currency Exchange<span class="nt">&lt;/title&gt;</span>
        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"currency.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;form&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"currency"</span> <span class="na">placeholder=</span><span class="s">"Currency"</span> <span class="na">type=</span><span class="s">"text"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Convert"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/form&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"result"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Now, we’ll make some changes to our JavaScript so it only changes 
when the form is submitted, and so it takes into account the user’s 
input. We’ll also add some error checking here:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">).</span><span class="nx">onsubmit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

        <span class="c1">// Send a GET request to the URL</span>
        <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://api.exchangeratesapi.io/latest?base=USD</span><span class="dl">'</span><span class="p">)</span>
        <span class="c1">// Put response into json form</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// Get currency from user input and convert to upper case</span>
            <span class="kd">const</span> <span class="nx">currency</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#currency</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>

            <span class="c1">// Get rate from data</span>
            <span class="kd">const</span> <span class="nx">rate</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">rates</span><span class="p">[</span><span class="nx">currency</span><span class="p">];</span>

            <span class="c1">// Check if currency is valid:</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">rate</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// Display exchange on the screen</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#result</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`1 USD is equal to </span><span class="p">${</span><span class="nx">rate</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">3</span><span class="p">)}</span><span class="s2"> </span><span class="p">${</span><span class="nx">currency</span><span class="p">}</span><span class="s2">.`</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// Display error on the screen</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#result</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Invalid Currency.</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">})</span>
        <span class="c1">// Catch any errors and log them to the console</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
        <span class="p">});</span>
        <span class="c1">// Prevent default submission</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p><img src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/exchange.gif" alt="Echange demo"></p>

<p>That’s all for this lecture! Next time, we’ll work on using JavaScript to create even more engaging user interfaces!</p>


                </main>

            </div>

        </div>

        
 
        <script src="Lecture%205%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/page.js"></script>

    


</body></html>