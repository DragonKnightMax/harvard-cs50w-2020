<!DOCTYPE html>
<html class="wf-ptsans-n4-active wf-ptsans-n7-active wf-active" lang="en-us"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width"><meta property="og:description" content="This course picks up where Harvard University's CS50 leaves off, diving more deeply into the design and implementation of web apps with Python, JavaScript, and SQL using frameworks like Django, React, and Bootstrap. Topics include database design, scalability, security, and user experience. Through hands-on projects, students learn to write and use APIs, create interactive UIs, and leverage cloud services like GitHub and Heroku. By semester’s end, students emerge with knowledge and experience in principles, languages, and tools that empower them to design and deploy applications on the Internet.">

        <meta property="og:image" content="https://img.youtube.com/vi/24Kf3v7kZyE/maxresdefault.jpg"><meta property="og:title" content="Lecture 8 - CS50's Web Programming with Python and JavaScript">

        <link href="https://cs50.harvard.edu/web/2020/favicon.ico?1645555620" rel="icon">

        <!-- https://fonts.google.com/specimen/PT+Sans?query=PT+Sans&selection.family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700 -->
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/webfont.js"></script>

        <!-- http://getbootstrap.com/docs/4.6/getting-started/introduction/ -->
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/jquery.js"></script>
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap.js"></script>

        <!-- https://bootstrap-table.com/docs/getting-started/introduction/ -->
        <link href="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table.css" rel="stylesheet">
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table.js"></script>
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table-mobile.js"></script>

        <!-- https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use -->
        <link href="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/all.css" rel="stylesheet">

        <!-- https://moment.github.io/luxon/ -->
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/luxon.js"></script>

        <!-- http://docs.mathjax.org/ -->
        <!-- https://www.jsdelivr.com/package/npm/mathjax?path=es5 -->
        <script crossorigin="anonymous" integrity="sha256-+nfSJ1LiSvANSK3wvi6FjM+oFwoIQvURU1frozp5z6o=" src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/tex-chtml.js"></script><style type="text/css">.CtxtMenu_InfoClose {  top:.2em; right:.2em;}
.CtxtMenu_InfoContent {  overflow:auto; text-align:left; font-size:80%;  padding:.4em .6em; border:1px inset; margin:1em 0px;  max-height:20em; max-width:30em; background-color:#EEEEEE;  white-space:normal;}
.CtxtMenu_Info.CtxtMenu_MousePost {outline:none;}
.CtxtMenu_Info {  position:fixed; left:50%; width:auto; text-align:center;  border:3px outset; padding:1em 2em; background-color:#DDDDDD;  color:black;  cursor:default; font-family:message-box; font-size:120%;  font-style:normal; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 15px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius:15px;               /* Safari and Chrome */  -moz-border-radius:15px;                  /* Firefox */  -khtml-border-radius:15px;                /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color="gray", Positive="true"); /* IE */}
</style><style type="text/css">.CtxtMenu_MenuClose {  position:absolute;  cursor:pointer;  display:inline-block;  border:2px solid #AAA;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  font-family: "Courier New", Courier;  font-size:24px;  color:#F0F0F0}
.CtxtMenu_MenuClose span {  display:block; background-color:#AAA; border:1.5px solid;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  line-height:0;  padding:8px 0 6px     /* may need to be browser-specific */}
.CtxtMenu_MenuClose:hover {  color:white!important;  border:2px solid #CCC!important}
.CtxtMenu_MenuClose:hover span {  background-color:#CCC!important}
.CtxtMenu_MenuClose:hover:focus {  outline:none}
</style><style type="text/css">.CtxtMenu_Menu {  position:absolute;  background-color:white;  color:black;  width:auto; padding:5px 0px;  border:1px solid #CCCCCC; margin:0; cursor:default;  font: menu; text-align:left; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 5px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius: 5px;             /* Safari and Chrome */  -moz-border-radius: 5px;                /* Firefox */  -khtml-border-radius: 5px;              /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */}
.CtxtMenu_MenuItem {  padding: 1px 2em;  background:transparent;}
.CtxtMenu_MenuArrow {  position:absolute; right:.5em; padding-top:.25em; color:#666666;  font-family: null; font-size: .75em}
.CtxtMenu_MenuActive .CtxtMenu_MenuArrow {color:white}
.CtxtMenu_MenuArrow.CtxtMenu_RTL {left:.5em; right:auto}
.CtxtMenu_MenuCheck {  position:absolute; left:.7em;  font-family: null}
.CtxtMenu_MenuCheck.CtxtMenu_RTL { right:.7em; left:auto }
.CtxtMenu_MenuRadioCheck {  position:absolute; left: .7em;}
.CtxtMenu_MenuRadioCheck.CtxtMenu_RTL {  right: .7em; left:auto}
.CtxtMenu_MenuInputBox {  padding-left: 1em; right:.5em; color:#666666;  font-family: null;}
.CtxtMenu_MenuInputBox.CtxtMenu_RTL {  left: .1em;}
.CtxtMenu_MenuComboBox {  left:.1em; padding-bottom:.5em;}
.CtxtMenu_MenuSlider {  left: .1em;}
.CtxtMenu_SliderValue {  position:absolute; right:.1em; padding-top:.25em; color:#333333;  font-size: .75em}
.CtxtMenu_SliderBar {  outline: none; background: #d3d3d3}
.CtxtMenu_MenuLabel {  padding: 1px 2em 3px 1.33em;  font-style:italic}
.CtxtMenu_MenuRule {  border-top: 1px solid #DDDDDD;  margin: 4px 3px;}
.CtxtMenu_MenuDisabled {  color:GrayText}
.CtxtMenu_MenuActive {  background-color: #606872;  color: white;}
.CtxtMenu_MenuDisabled:focus {  background-color: #E8E8E8}
.CtxtMenu_MenuLabel:focus {  background-color: #E8E8E8}
.CtxtMenu_ContextMenu:focus {  outline:none}
.CtxtMenu_ContextMenu .CtxtMenu_MenuItem:focus {  outline:none}
.CtxtMenu_SelectionMenu {  position:relative; float:left;  border-bottom: none; -webkit-box-shadow:none; -webkit-border-radius:0px; }
.CtxtMenu_SelectionItem {  padding-right: 1em;}
.CtxtMenu_Selection {  right: 40%; width:50%; }
.CtxtMenu_SelectionBox {  padding: 0em; max-height:20em; max-width: none;  background-color:#FFFFFF;}
.CtxtMenu_SelectionDivider {  clear: both; border-top: 2px solid #000000;}
.CtxtMenu_Menu .CtxtMenu_MenuClose {  top:-10px; left:-10px}
</style>

        <!-- https://github.com/verlok/vanilla-lazyload -->
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/intersection-observer.js"></script>
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/lazyload.js"></script>

        <!-- https://github.com/davidjbradshaw/iframe-resizer -->
        <!-- https://www.jsdelivr.com/package/npm/iframe-resizer?path=js -->
        <script crossorigin="anonymous" integrity="sha256-S8f0Q/V9VcfrqYgWo9EFS9zuDMdPTBMC+CBW0RjxQbs=" src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/iframeResizer.js"></script>

        <!-- https://github.com/scratchblocks/scratchblocks/releases -->
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/scratchblocks.js"></script><style><![CDATA[ .sb-label {
      font-family: Lucida Grande, Verdana, Arial, DejaVu Sans, sans-serif;
      font-weight: bold;
      fill: #fff;
      font-size: 10px;
      word-spacing: +1px;
    }

    .sb-obsolete { fill: #d42828; }
    .sb-motion { fill: #4a6cd4; }
    .sb-looks { fill: #8a55d7; }
    .sb-sound { fill: #bb42c3; }
    .sb-pen { fill: #0e9a6c;  }
    .sb-events { fill: #c88330; }
    .sb-control { fill: #e1a91a; }
    .sb-sensing { fill: #2ca5e2; }
    .sb-operators { fill: #5cb712; }
    .sb-variables { fill: #ee7d16; }
    .sb-list { fill: #cc5b22 }
    .sb-custom { fill: #632d99; }
    .sb-custom-arg { fill: #5947b1; }
    .sb-extension { fill: #4b4a60; }
    .sb-grey { fill: #969696; }

    .sb-bevel {
      filter: url(#bevelFilter);
    }

    .sb-input {
      filter: url(#inputBevelFilter);
    }
    .sb-input-number,
    .sb-input-string,
    .sb-input-number-dropdown {
      fill: #fff;
    }
    .sb-literal-number,
    .sb-literal-string,
    .sb-literal-number-dropdown,
    .sb-literal-dropdown {
      font-weight: normal;
      font-size: 9px;
      word-spacing: 0;
    }
    .sb-literal-number,
    .sb-literal-string,
    .sb-literal-number-dropdown {
      fill: #000;
    }

    .sb-darker {
      filter: url(#inputDarkFilter);
    }

    .sb-outline {
      stroke: #fff;
      stroke-opacity: 0.2;
      stroke-width: 2;
      fill: none;
    }

    .sb-define-hat-cap {
      stroke: #632d99;
      stroke-width: 1;
      fill: #8e2ec2;
    }

    .sb-comment {
      fill: #ffffa5;
      stroke: #d0d1d2;
      stroke-width: 1;
    }
    .sb-comment-line {
      fill: #ffff80;
    }
    .sb-comment-label {
      font-family: Helevetica, Arial, DejaVu Sans, sans-serif;
      font-weight: bold;
      fill: #5c5d5f;
      word-spacing: 0;
      font-size: 12px;
    }

    .sb-diff {
      fill: none;
      stroke: #000;
    }
    .sb-diff-ins {
      stroke-width: 2px;
    }
    .sb-diff-del {
      stroke-width: 3px;
    }
  ]]></style><style><![CDATA[ .sb3-label {
      font: 500 12pt Helevetica Neue, Helvetica, sans-serif;
      fill: #fff;
      word-spacing: +1pt;
    }

    .sb3-motion { fill: #4c97ff; stroke: #3373cc; }
    .sb3-motion-alt { fill: #4280d7; }
    .sb3-motion-dark { fill: #4c97ff; }
    .sb3-looks { fill: #9966ff; stroke: #774dcb; }
    .sb3-looks-alt { fill: #855cd6; }
    .sb3-looks-dark { fill: #bd42bd; }
    .sb3-sound { fill: #cf63cf; stroke: #bd42bd; }
    .sb3-sound-alt { fill: #c94fc9; }
    .sb3-sound-dark { fill: #bd42bd; }
    .sb3-control { fill: #ffab19; stroke: #cf8b17; }
    .sb3-control-alt { fill: #ec9c13; }
    .sb3-control-dark { fill: #cf8b17; }
    .sb3-events { fill: #ffbf00; stroke: #cc9900; }
    .sb3-events-alt { fill: #e6ac00; }
    .sb3-events-dark { fill: #cc9900; }
    .sb3-sensing { fill: #5cb1d6; stroke: #2e8eb8; }
    .sb3-sensing-alt { fill: #47a8d1; }
    .sb3-sensing-dark { fill: #2e8eb8; }
    .sb3-operators { fill: #59c059; stroke: #389438; }
    .sb3-operators-alt { fill: #46b946; }
    .sb3-operators-dark { fill: #389438; }
    .sb3-variables { fill: #ff8c1a; stroke: #db6e00; }
    .sb3-variables-alt { fill: #ff8000; }
    .sb3-variables-dark { fill: #db6e00; }
    .sb3-list { fill: #ff661a; stroke: #e64d00; }
    .sb3-list-alt { fill: #ff5500; }
    .sb3-list-dark { fill: #e64d00; }
    .sb3-custom { fill: #ff6680; stroke: #ff3355; }
    .sb3-custom-alt { fill: #ff4d6a; }
    .sb3-custom-dark { fill: #ff3355; }
    .sb3-custom-arg { fill: #ff6680; stroke: #ff3355; }

    /* extension blocks, e.g. pen */
    .sb3-extension { fill: #0fbd8c; stroke: #0b8e69; }
    .sb3-extension-alt { fill: #0da57a; }
    .sb3-extension-line { stroke: #0da57a; }
    .sb3-extension-dark { fill: #0b8e69; }

    /* obsolete colors: chosen by hand, indicates invalid blocks */
    .sb3-obsolete { fill: #ed4242; stroke: #ca2b2b; }
    .sb3-obsolete-alt { fill: #db3333; }
    .sb3-obsolete-dark { fill: #ca2b2b; }

    /* grey: special color from the Scratch 3.0 design mockups */
    .sb3-grey { fill: #bfbfbf; stroke: #909090; }
    .sb3-grey-alt { fill: #b2b2b2; }
    .sb3-grey-dark { fill: #909090; }

    .sb3-input-color {
      stroke: #fff;
    }

    .sb3-input-number,
    .sb3-input-string {
      fill: #fff;
    }
    .sb3-literal-number,
    .sb3-literal-string,
    .sb3-literal-number-dropdown,
    .sb3-literal-dropdown {
      word-spacing: 0;
    }
    .sb3-literal-number,
    .sb3-literal-string {
      fill: #575e75;
    }

    .sb3-comment {
      fill: #ffffa5;
      stroke: #d0d1d2;
      stroke-width: 1;
    }
    .sb3-comment-line {
      fill: #ffff80;
    }
    .sb3-comment-label {
      font: 400 12pt Helevetica Neue, Helvetica, sans-serif;
      fill: #000;
      word-spacing: 0;
    }

    .sb3-diff {
      fill: none;
      stroke: #000;
    }
    .sb3-diff-ins {
      stroke-width: 2px;
    }
    .sb3-diff-del {
      stroke-width: 3px;
    }
  ]]></style>

        

        <link href="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/page.css" rel="stylesheet">
        <link rel="stylesheet" href="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/css.css" media="all"><script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/jekyll-theme-cs50.js"></script>

        <script>
            window.CS50 = {
                local: {"day":"numeric","hour":"numeric","minute":"numeric","month":"long","timeZoneName":"short","weekday":"long","year":"numeric"},
                locale: "en",
                tz: "America/New_York"
            };
        </script>

        <title>Lecture 8 - CS50's Web Programming with Python and JavaScript</title>


    <style id="MJX-CHTML-styles">
mjx-container[jax="CHTML"] {
  line-height: 0;
}

mjx-container [space="1"] {
  margin-left: .111em;
}

mjx-container [space="2"] {
  margin-left: .167em;
}

mjx-container [space="3"] {
  margin-left: .222em;
}

mjx-container [space="4"] {
  margin-left: .278em;
}

mjx-container [space="5"] {
  margin-left: .333em;
}

mjx-container [rspace="1"] {
  margin-right: .111em;
}

mjx-container [rspace="2"] {
  margin-right: .167em;
}

mjx-container [rspace="3"] {
  margin-right: .222em;
}

mjx-container [rspace="4"] {
  margin-right: .278em;
}

mjx-container [rspace="5"] {
  margin-right: .333em;
}

mjx-container [size="s"] {
  font-size: 70.7%;
}

mjx-container [size="ss"] {
  font-size: 50%;
}

mjx-container [size="Tn"] {
  font-size: 60%;
}

mjx-container [size="sm"] {
  font-size: 85%;
}

mjx-container [size="lg"] {
  font-size: 120%;
}

mjx-container [size="Lg"] {
  font-size: 144%;
}

mjx-container [size="LG"] {
  font-size: 173%;
}

mjx-container [size="hg"] {
  font-size: 207%;
}

mjx-container [size="HG"] {
  font-size: 249%;
}

mjx-container [width="full"] {
  width: 100%;
}

mjx-box {
  display: inline-block;
}

mjx-block {
  display: block;
}

mjx-itable {
  display: inline-table;
}

mjx-row {
  display: table-row;
}

mjx-row > * {
  display: table-cell;
}

mjx-mtext {
  display: inline-block;
}

mjx-mstyle {
  display: inline-block;
}

mjx-merror {
  display: inline-block;
  color: red;
  background-color: yellow;
}

mjx-mphantom {
  visibility: hidden;
}

mjx-assistive-mml {
  position: absolute !important;
  top: 0px;
  left: 0px;
  clip: rect(1px, 1px, 1px, 1px);
  padding: 1px 0px 0px 0px !important;
  border: 0px !important;
  display: block !important;
  width: auto !important;
  overflow: hidden !important;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

mjx-assistive-mml[display="block"] {
  width: 100% !important;
}

mjx-c::before {
  display: block;
  width: 0;
}

.MJX-TEX {
  font-family: MJXZERO, MJXTEX;
}

.TEX-B {
  font-family: MJXZERO, MJXTEX-B;
}

.TEX-I {
  font-family: MJXZERO, MJXTEX-I;
}

.TEX-MI {
  font-family: MJXZERO, MJXTEX-MI;
}

.TEX-BI {
  font-family: MJXZERO, MJXTEX-BI;
}

.TEX-S1 {
  font-family: MJXZERO, MJXTEX-S1;
}

.TEX-S2 {
  font-family: MJXZERO, MJXTEX-S2;
}

.TEX-S3 {
  font-family: MJXZERO, MJXTEX-S3;
}

.TEX-S4 {
  font-family: MJXZERO, MJXTEX-S4;
}

.TEX-A {
  font-family: MJXZERO, MJXTEX-A;
}

.TEX-C {
  font-family: MJXZERO, MJXTEX-C;
}

.TEX-CB {
  font-family: MJXZERO, MJXTEX-CB;
}

.TEX-FR {
  font-family: MJXZERO, MJXTEX-FR;
}

.TEX-FRB {
  font-family: MJXZERO, MJXTEX-FRB;
}

.TEX-SS {
  font-family: MJXZERO, MJXTEX-SS;
}

.TEX-SSB {
  font-family: MJXZERO, MJXTEX-SSB;
}

.TEX-SSI {
  font-family: MJXZERO, MJXTEX-SSI;
}

.TEX-SC {
  font-family: MJXZERO, MJXTEX-SC;
}

.TEX-T {
  font-family: MJXZERO, MJXTEX-T;
}

.TEX-V {
  font-family: MJXZERO, MJXTEX-V;
}

.TEX-VB {
  font-family: MJXZERO, MJXTEX-VB;
}

mjx-stretchy-v mjx-c, mjx-stretchy-h mjx-c {
  font-family: MJXZERO, MJXTEX-S1, MJXTEX-S4, MJXTEX, MJXTEX-A ! important;
}

@font-face /* 0 */ {
  font-family: MJXZERO;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff") format("woff");
}

@font-face /* 1 */ {
  font-family: MJXTEX;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff") format("woff");
}

@font-face /* 2 */ {
  font-family: MJXTEX-B;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Bold.woff") format("woff");
}

@font-face /* 3 */ {
  font-family: MJXTEX-I;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff") format("woff");
}

@font-face /* 4 */ {
  font-family: MJXTEX-MI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Italic.woff") format("woff");
}

@font-face /* 5 */ {
  font-family: MJXTEX-BI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Math-BoldItalic.woff") format("woff");
}

@font-face /* 6 */ {
  font-family: MJXTEX-S1;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff") format("woff");
}

@font-face /* 7 */ {
  font-family: MJXTEX-S2;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size2-Regular.woff") format("woff");
}

@font-face /* 8 */ {
  font-family: MJXTEX-S3;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size3-Regular.woff") format("woff");
}

@font-face /* 9 */ {
  font-family: MJXTEX-S4;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size4-Regular.woff") format("woff");
}

@font-face /* 10 */ {
  font-family: MJXTEX-A;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_AMS-Regular.woff") format("woff");
}

@font-face /* 11 */ {
  font-family: MJXTEX-C;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Regular.woff") format("woff");
}

@font-face /* 12 */ {
  font-family: MJXTEX-CB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Bold.woff") format("woff");
}

@font-face /* 13 */ {
  font-family: MJXTEX-FR;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Regular.woff") format("woff");
}

@font-face /* 14 */ {
  font-family: MJXTEX-FRB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Bold.woff") format("woff");
}

@font-face /* 15 */ {
  font-family: MJXTEX-SS;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Regular.woff") format("woff");
}

@font-face /* 16 */ {
  font-family: MJXTEX-SSB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Bold.woff") format("woff");
}

@font-face /* 17 */ {
  font-family: MJXTEX-SSI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Italic.woff") format("woff");
}

@font-face /* 18 */ {
  font-family: MJXTEX-SC;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Script-Regular.woff") format("woff");
}

@font-face /* 19 */ {
  font-family: MJXTEX-T;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Typewriter-Regular.woff") format("woff");
}

@font-face /* 20 */ {
  font-family: MJXTEX-V;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Regular.woff") format("woff");
}

@font-face /* 21 */ {
  font-family: MJXTEX-VB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Bold.woff") format("woff");
}
</style></head>

    <body class="">

        <div class="alert fixed-top mb-0 rounded-0 shadow alert-success alert-dismissible" data-alert="success dismissible" data-hash="edc24fffed7a3a9ad8c189ef5e2aca41" id="alert" role="alert">
            <button aria-label="Close" class="btn-close" data-bs-dismiss="alert" type="button"></button><p>Interested in <a href="https://cs50.harvard.edu/web/2020/#how-to-take-this-course" class="alert-link">a verified certificate, a professional certificate, or transfer credit and accreditation</a>?
And get vaccinated (as soon as it’s available to you). 💉 <a href="https://www.who.int/news-room/feature-stories/detail/getting-the-covid-19-vaccine" class="alert-link">Here’s why</a>. <a href="https://www.google.com/search?q=covid-19+vaccine+finder" class="alert-link">Here’s how</a>.</p></div>
        

        <div class="container-fluid">

            <div class="row">

                <aside class="col-md" style="height: 513.667px; top: 81.3333px;">
 
                    <header><h1 data-id="cs50s-web-programming-with-python-and-javascript"><a href="https://cs50.harvard.edu/web/2020/">CS50’s Web Programming with Python and JavaScript</a></h1>

<p>OpenCourseWare</p>

<p><a class="pr-1 small" href="https://cs50.harvard.edu/donate">Donate<i aria-hidden="true" class="fas fa-external-link-alt ps-2"></i></a></p>

<p><a href="https://brianyu.me/">Brian Yu</a><br>
<a href="mailto:brian@cs.harvard.edu">brian@cs.harvard.edu</a></p>

<p><a href="https://cs.harvard.edu/malan/">David J. Malan</a>
<br>
<a href="mailto:malan@harvard.edu">malan@harvard.edu</a>
<br>
<a class="mr-1" href="https://www.facebook.com/dmalan"><i aria-hidden="true" class="fab fa-facebook-f" title="Facebook"></i><span class="sr-only">Facebook</span></a>
<a class="mr-1" href="https://github.com/dmalan"><i aria-hidden="true" class="fab fa-github" title="GitHub"></i><span class="sr-only">GitHub</span></a>
<a class="mr-1" href="https://www.instagram.com/davidjmalan/"><i aria-hidden="true" class="fab fa-instagram" title="Instagram"></i><span class="sr-only">Instagram</span></a>
<a class="mr-1" href="https://www.linkedin.com/in/malan/"><i aria-hidden="true" class="fab fa-linkedin" title="LinkedIn"></i><span class="sr-only">LinkedIn</span></a>
<a class="mr-1" href="https://orcid.org/0000-0001-5338-2522"><i aria-hidden="true" class="fab fa-orcid" title="ORCID"></i><span class="sr-only">ORCID</span></a>
<a class="mr-1" href="https://www.quora.com/profile/David-J-Malan"><i aria-hidden="true" class="fab fa-quora" title="Quora"></i><span class="sr-only">Quora</span></a>
<a class="mr-1" href="https://www.reddit.com/user/davidjmalan"><i aria-hidden="true" class="fab fa-reddit-alien" title="Reddit"></i><span class="sr-only">Reddit</span></a>
<a class="mr-1" href="https://www.tiktok.com/@davidjmalan"><i aria-hidden="true" class="fab fa-tiktok" title="TikTok"></i><span class="sr-only">Twitter</span></a>
<a class="mr-1" href="https://twitter.com/davidjmalan"><i aria-hidden="true" class="fab fa-twitter" title="Twitter"></i><span class="sr-only">Twitter</span></a></p></header>

                    

                    <button aria-controls="nav" aria-expanded="false" class="btn btn-sm collapsed d-md-none" data-bs-target="aside &gt; nav" data-bs-toggle="collapse">
                        Menu
                    </button>

                    <nav class="collapse d-md-block" id="nav"><hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/movie/">🍿 CS50x Movie Night 2022</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/puzzles/"><i class="fas fa-puzzle-piece pe-2"></i>CS50x Puzzle Day 2022</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/prepare/"><i class="fas fa-book pe-2"></i>How to Prepare for Technical Interviews</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.ly/zoom"><i class="fas fa-video pe-2"></i>Zoom Meetings</a></li>
</ul>

<hr>

<ol start="0">
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/0/">HTML, CSS</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/1/">Git</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/2/">Python</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/3/">Django</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/4/">SQL, Models, and Migrations</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/5/">JavaScript</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/6/">User Interfaces</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/7/">Testing, CI/CD</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/8/">Scalability and Security</a></li>
</ol>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/honesty/">Academic Honesty</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/certificate/">CS50 Certificate</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/faqs/">FAQs</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.me/cs50w">Gradebook</a></li>
</ul>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed">Ed Discussion</a> for Q&amp;A</li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://us.edstem.org/quickstart/ed-discussion.pdf">Quick Start Guide</a></li>
</ul>

<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/web">edX</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://itunes.apple.com/us/course/id1505432709">iTunes U</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.youtube.com/playlist?list=PLhQjrBD2T380xvFSUmToMMzERZ3qB5Ueu">YouTube</a></li>
</ul>

<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.noticeable.news/">Changelog</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.statuspage.io/">Status Page</a></li>
</ul>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/communities/"><strong>Communities</strong></a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.clubhouse.com/club/cs50">Clubhouse</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://discord.gg/cs50">Discord</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed">Ed</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/groups/cs50/">Facebook Group</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/cs50/">Facebook Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://github.com/cs50">GitHub</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://gitter.im/cs50/x">Gitter</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://instagram.com/cs50">Instagram</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/groups/7437240/">LinkedIn Group</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/school/CS50/">LinkedIn Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.medium.com/">Medium</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.quora.com/topic/CS50">Quora</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.reddit.com/r/cs50/">Reddit</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/slack">Slack</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.snapchat.com/add/cs50">Snapchat</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://soundcloud.com/cs50">SoundCloud</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.stackexchange.com/">Stack Exchange</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.tiktok.com/@cs50">TikTok</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://twitter.com/cs50">Twitter</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://www.youtube.com/subscription_center?add_user=cs50tv">YouTube</a></li>
</ul>

<hr>

<p><a href="https://cs50.harvardshop.com/"><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/GGMdcKt.png" alt="Harvard Shop"></a></p>

<hr>

<p><a href="https://cs50.harvard.edu/web/2020/license/" class="small"><i class="fab fa-creative-commons me-1"></i>License</a></p></nav>

                    <footer></footer>

                </aside>

                <main class="col-md" style="margin-bottom: 0px; margin-top: 81.3333px;">

                    <a data-id="" id="lecture-8" style="top: -81.3333px;"></a><h1 class="no_toc"><a data-id="" href="#lecture-8">Lecture 8</a></h1>

<ul id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
  <li><a href="#scalability" id="markdown-toc-scalability">Scalability</a></li>
  <li><a href="#scaling" id="markdown-toc-scaling">Scaling</a></li>
  <li><a href="#load-balancing" id="markdown-toc-load-balancing">Load Balancing</a></li>
  <li><a href="#autoscaling" id="markdown-toc-autoscaling">Autoscaling</a>    <ul>
      <li><a href="#server-failure" id="markdown-toc-server-failure">Server Failure</a></li>
    </ul>
  </li>
  <li><a href="#scaling-databases" id="markdown-toc-scaling-databases">Scaling Databases</a>    <ul>
      <li><a href="#database-replication" id="markdown-toc-database-replication">Database Replication</a></li>
    </ul>
  </li>
  <li><a href="#caching" id="markdown-toc-caching">Caching</a></li>
  <li><a href="#security" id="markdown-toc-security">Security</a>    <ul>
      <li><a href="#git-and-github" id="markdown-toc-git-and-github">Git and GitHub</a></li>
    </ul>
  </li>
  <li><a href="#html" id="markdown-toc-html">HTML</a></li>
  <li><a href="#https" id="markdown-toc-https">HTTPS</a>    <ul>
      <li><a href="#secret-key-cryptography" id="markdown-toc-secret-key-cryptography">Secret-Key Cryptography</a></li>
      <li><a href="#public-key-cryptography" id="markdown-toc-public-key-cryptography">Public-Key Cryptography</a></li>
    </ul>
  </li>
  <li><a href="#databases" id="markdown-toc-databases">Databases</a>    <ul>
      <li><a href="#apis" id="markdown-toc-apis">APIs</a></li>
      <li><a href="#environment-variables" id="markdown-toc-environment-variables">Environment Variables</a></li>
    </ul>
  </li>
  <li><a href="#javascript" id="markdown-toc-javascript">JavaScript</a>    <ul>
      <li><a href="#cross-site-request-forgery" id="markdown-toc-cross-site-request-forgery">Cross-Site Request Forgery</a></li>
    </ul>
  </li>
  <li><a href="#whats-next" id="markdown-toc-whats-next">What’s next?</a></li>
</ul>

<a data-id="" id="introduction" style="top: -81.3333px;"></a><h2><a data-id="" href="#introduction">Introduction</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>So
 far, we’ve discussed how to build simple web pages using HTML and CSS, 
and how to use Git and GitHub in order to keep track of changes to our 
code and collaborate with others. We also familiarized ourselves with 
the Python programming language, started using Django to create web 
applications, and learned how to use Django models to store information 
in our sites. We then introduced JavaScript and learned how to use it to
 make web pages more interactive, and talked about using animation and 
React to further improve our User Interfaces. We then talked about some 
best practices in software development and some technologies commonly 
used to achieve those best practces.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Today, in our final lecture, we’ll discuss the issues of scaling up and securing our web applications.</li>
</ul>

<a data-id="" id="scalability" style="top: -81.3333px;"></a><h2><a data-id="" href="#scalability">Scalability</a></h2>

<p>So far in this course, we’ve built applications that are run only 
locally on our computers, but eventually, we’ll want to launch our sites
 so they canbe accessed by anyone on the internet. In order to do this, 
we run our sites on <strong>servers</strong>, which are physical pieces 
of hardware dedicated to running applications. Servers can either be 
on-premise (We own and maintain physical servers where our application 
is hosted) or on the cloud (servers are owned by a different company 
such as Amazon or Google, and we pay to rent server space where our 
application is hosted). There are benefits and drawbacks to both 
options:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Customization</strong>:
 Hosting your own servers gives you the ability to decide exactly how 
they work, allowing for more flexibility than cloud-based hosting.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Expertise</strong>: It is much simpler to host an application on the cloud than it is to maintain your own servers.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Cost</strong>:
 Since server-hosting sites need to make a profit, they will charge you 
more than it costs them to maintain their on-premise servers, making 
cloud-based servers more expensive. However, the startup costs of 
running on-premise servers can be high, as you need to purchase physical
 servers and potentially hire someone with the expertise to set them up.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Scalability</strong>:
 Scaling is typically easier when hosting on the cloud. For example, if 
we host a site on premise that gets 500 visits per day, and then it 
starts getting 500,000 visits per day, we would have to order and setup 
more physical servers to handle the requests, and in the mean time many 
of our users will not be able to access the site. Most cloud hosting 
sites will allow you to rent server space flexibly, paying based on how 
much action your site sees.</li>
</ul>

<p>When a user sends an HTTP request to this server, the server should 
send back a response. However, in reality, most servers get far more 
than one request at a time, as depicted below:</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/server0.png" alt="server many inputs"></p>

<p>This is where we run into the issue of scalability. A single server 
can handle only so many requests at once, forcing us to make plans about
 what to do when our one server is overworked. Whether we decide to host
 on premise or on the cloud, we have to determine how many requests a 
server can handle without crashing, which can be done using any number 
of <strong>benchmarking</strong> tools including Apache Bench.</p>

<a data-id="" id="scaling" style="top: -81.3333px;"></a><h2><a data-id="" href="#scaling">Scaling</a></h2>

<p>Once we have some upper limit on how many requests our server can 
handling, we can begin thinking about how we want to handle the scaling 
of our application. Two different approaches to scaling include:</p>
<ol>
  <li><strong>Vertical Scaling</strong>: In vertical scaling, when our 
server is overwhelmed we simply buy or build a larger server. This 
strategy is limited however, as there is an upper limit on how powerful a
 single server can be.</li>
  <li><strong>Horizontal Scaling</strong>: In horizontal scaling, when 
our server is overwhelmed we buy or build more servers, and then split 
the requests among our multiple servers.</li>
</ol>

<a data-id="" id="load-balancing" style="top: -81.3333px;"></a><h2><a data-id="" href="#load-balancing">Load Balancing</a></h2>

<p>When we use horizontal scaling, we are faced with the additional 
problem of how we decide which servers are assigned to which requests. 
We answer that question by employing a <strong>load balancer</strong>, 
which is another piece of hardware that intercepts incoming requests, 
and then assigns those requests to one of our servers. There are a 
number of different methods for deciding which server receives which 
request, but here are a few:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Random</strong>: In this simple method, the load balancer will decide randomly which server it should assign a request to.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Round-Robin</strong>:
 In this method, the load balancer will alternate which server receives 
an incoming request. If we have three servers, the first request might 
go to server A, the second to server B, the third to server C, and the 
fourth back to server A.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Fewest Connections</strong>:
 In this method, the load balancer looks for the server that is 
currently handling the fewest requests, and assigns the incoming request
 to that server. This allows us to make sure we’re not overworking one 
particular server, but it also takes longer for the load balancer to 
calculate the number of requests each server is currently handling than 
it dows for it to simply choose a random server.</li>
</ul>

<p>There is no method of load balancing that is strictly better than all
 other methods, and there are many different methods used in practice. 
One problem that can arise when scaling horizontally is that we might 
have sessions that are stored on one server but not another, and we 
don’t want users to have to re-enter information just because the load 
balancer pushes their request to a new server. Like many problems of 
scalability, there are multiple approaches to solving the problem of 
sessions:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Sticky Sessions</strong>:
 Once a user visits a site, the load balancer remembers which server 
they were sent to first, and makes sure to send them to the same one. 
One big concern with this method is that we could end up having a large 
number of users sticking to one server, causing it to crash.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Database Sessions</strong>:
 All sessions are stored in a database that all servers have access to. 
This way, a user’s information will be available no matter which server 
they are assigned to. The drawback here is that it takes additional time
 and computing power to read from and write to a database.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Client-Side Sessions</strong>:
 Rather than storing information on our servers, we can choose to store 
them locally on the user’s web browser as cookies. The drawbacks to this
 method include the security concern of users creating false cookies 
that allow them to log in as another user, and the computational concern
 of sending cookie information back and forth with every request.</li>
</ul>

<p>Like with load balancing, there is no best answer to the sessions 
problem, and the method you choose will often depend on your specific 
circumstances.</p>

<a data-id="" id="autoscaling" style="top: -81.3333px;"></a><h2><a data-id="" href="#autoscaling">Autoscaling</a></h2>

<p>Another problem that we could run into is that many websites are 
visited much more frequently at certain times. For example, if we decide
 to launch our “Is it New Year’s?” app from earlier, we might expect it 
to get a lot more traffic in late December to early January than any 
other time of year. If we buy enough servers for the site to stay active
 during the winter, those servers would be sitting idle for the rest of 
the year, wasting space and energy. This scenario has brought about the 
idea of <strong>autoscaling</strong> which has become common in cloud 
computing, where the number of servers being used by your site can grow 
and shrink based on the number of requests it gets. Autoscaling is not a
 perfect solution though, as it takes time to determine that a new 
server is needed and to launch that server. Another potential problem is
 that the more servers you have running, the more opportunity there is 
for one to fail.</p>

<a data-id="" id="server-failure" style="top: -81.3333px;"></a><h3><a data-id="" href="#server-failure">Server Failure</a></h3>

<p>Having multiple servers though, can help to avoid what is known as a <strong>Single Point of Failure</strong>,
 which is a piece of hardware that, after failing, will cause the entire
 site to crash. When scaling horizontally, the load balancer can detect 
which servers have crashed by sending periodic <strong>heartbeat</strong>
 requests to each server, and then stop assigning new requests to 
servers that have crashed. At this point, it seems we have simply moved 
our single point of failure from a server to the load balancer, but we 
can account for this by having backup load balancers available if our 
original happens to crash.</p>

<a data-id="" id="scaling-databases" style="top: -81.3333px;"></a><h2><a data-id="" href="#scaling-databases">Scaling Databases</a></h2>

<p>In addition to scaling our servers that process requests, we’ll also 
want to think of ways to scale our Databases. In this course we use 
SQLite which stores data inside a file on the server, but as we store 
more and more data, it sometimes makes more sense to store data in a 
number of different files, and maybe even on a separate server. This 
brings up the problem then of what to do when our database server can no
 longer handle all of the requests coming in. Like in other issues of 
scalability, there are a number of methods we can use to mitigate this 
problem:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Vertical Partitioning</strong>:
 This is a method similar to the one we used when first discussing SQL, 
where we split our data into multiple different tables rather than 
having redundant information in one table. (Feel free to look back on 
lecture 4 where we split the <code class="language-plaintext highlighter-rouge">flights</code> table into a <code class="language-plaintext highlighter-rouge">flights</code> table and an <code class="language-plaintext highlighter-rouge">airports</code> table).</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Horizontal Partitioning</strong>: This method involves storing multiple tables with the same format, but different information. For example, we could split a <code class="language-plaintext highlighter-rouge">flights</code> table into a <code class="language-plaintext highlighter-rouge">domestic_flights</code> table and an <code class="language-plaintext highlighter-rouge">international_flights</code>
 table. This way, when we wish to search for a flight from JFK to LHR, 
we don’t have to waste time searching through a table full of domestic 
flights. One drawback to this method is that it can be expensive to join
 multiple tables once they have been split.</li>
</ul>

<a data-id="" id="database-replication" style="top: -81.3333px;"></a><h3><a data-id="" href="#database-replication">Database Replication</a></h3>

<p>Even after we’ve scaled a database, it seems we’re still left with a 
single point of failure. If our database server crashes, all of our data
 could be lost. Just as we added more servers to avoid a single point of
 failure, we can add copies of our database to make sure the failure of 
one database does not shut down our application. Also like before there 
are different methods of database replication, two of the most popular 
of which are:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Single-Primary Replication</strong>:
 In this method there are multiple databases, but only one of them is 
considered to be the primary database, meaning you can read from and 
write to one of the databases, but only read from each of the others. 
When the primary database is updated, the other databases are then 
updated to match the primary one. One drawback of this method is that it
 still contains a single point of failure when it comes to writing to 
the database.</li>
</ul>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/single_primary.png" alt="single primary visual"></p>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Multi-Primary Replication</strong>:
 In this method, all of the databases can be read from and written to. 
This solves the problem of a single point of failure, but it comes with a
 tradeoff: it is now much more difficult to keep all databases up to 
date because each database must be aware of changes to all other 
databases. This system also sets us up for the possibility of some 
conflicts:
    <ul class="fa-ul">
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Update Conflict</strong>:
 With multiple databases, one user may attempt to edit a row in one 
database while another user attempts to edit that same row in a 
different database, causing a problem when the databases sync up.</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Uniqueness Conflict</strong>:
 Every row in a SQL database must have a unique identifier, and we may 
run into the problem that we assign the same id to two different entries
 in two different databases.</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Delete Conflict</strong>: One user may delete a row while another user attempts to update it.</li>
    </ul>
  </li>
</ul>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/multi_primary.png" alt="multi primary visual"></p>

<a data-id="" id="caching" style="top: -81.3333px;"></a><h2><a data-id="" href="#caching">Caching</a></h2>

<p>Whenever we’re working with larger databases, it is important to 
recognize that every interaction we have with a database is costly. 
Therefore, we wish to minimize the number of calls to our database 
server. Let’s look, for example, at the <a href="https://www.nytimes.com/">New York Times</a>
 website. The New York Times may have some database with all of their 
articles which is queried and some template that is rendered every time 
someone loads the home page, but this would be a waste of resources, as 
the articles displayed on the home page likely do not change much from 
second to second. One way we can deal with this problem is by using <strong>Caching</strong>,
 which is the idea of storing some information in a more accessible 
location if we anticipate needing it again in the near future.</p>

<p>One way that caching can be implemented is by storing data on the 
user’s web browser, so that when a user loads certain pages, no request 
to the server even needs to be sent. One way to do this is by including 
this line in the header of an HTTP response:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cache-Control: max-age=86400
</code></pre></div></div>

<p>This will tell the browser that when visiting a page, as long as I 
have visited that page within the last 86400 milliseconds, no request 
has to be made to the server. This method is used commonly by web 
browsers especially with files that are less likely to change over short
 periods such as a CSS file. To take more control over this process, we 
can also add an <code class="language-plaintext highlighter-rouge">ETag</code>
 to the HTTP response header, which is a unique sequence of characters 
that represents a specific version of a document. This is useful because
 future requests can include this tag and compare it to the tag of the 
latest document on the server, only returning an entire document when 
the two differ.</p>

<p>In addition to the client-side caching discussed above, it can often 
be helpful to include a cache on the server side. With this cache, our 
backend setup will look a bit like the one below, where all servers have
 access to a cache.</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/server_cache.png" alt="server caching"></p>

<p>Django provides its own <a href="https://docs.djangoproject.com/en/3.0/topics/cache/">cache framework</a> which will allow us to incorporate caching in our projects. This framework offers several ways of implementing a cache:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Per-View Caching</strong>:
 This allows us to decide that once a specific view has been loaded, 
that same view can be rendered without going through the function for 
the next specified amount of time.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Template-Fragment Caching</strong>:
 This caches specific parts of a template so they do not have to be 
re-rendered. For example, we may have a navigation bar that rarely 
changes, meaning we could save time by not reloading it.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Low-Level Cache API</strong>: This allows you to do more flexible caching, essentially storing any information you would like to.</li>
</ul>

<p>We won’t go into the details here of how to implement caching in Django, but do take a look at the <a href="https://docs.djangoproject.com/en/3.0/topics/cache/">documentation</a> if you’re interested!</p>

<a data-id="" id="security" style="top: -81.3333px;"></a><h2><a data-id="" href="#security">Security</a></h2>

<p>Now, we’ll begin to discuss how to make sure our web applications are
 secure, which will involve many different measures that span nearly 
every topic we’ve discussed in this course.</p>

<a data-id="" id="git-and-github" style="top: -81.3333px;"></a><h3><a data-id="" href="#git-and-github">Git and GitHub</a></h3>

<p>One of the greatest strengths of Git and GitHub is how easy they make it to share and contribute to <strong>open-source software</strong>,
 which can be seen and contributed to by anyone on the internet. One 
drawback to this is that if at any point you commit a file that includes
 some private credentials like a password or API key, those credentials 
could be publicly available.</p>

<a data-id="" id="html" style="top: -81.3333px;"></a><h2><a data-id="" href="#html">HTML</a></h2>

<p>There are many vulnerabilities that arise from using HTML. One common weakness is known as a <strong>Phishing Attack</strong>,
 which occurs when a user who thinks they are going to one page is 
actually taken to another. These are not necesarily things we can 
account for when designing a website, but we should definitely keep them
 in mind when interacting with the web ourselves. For example, a 
malicious user might write out this HTML:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Link<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://cs50.harvard.edu/"</span><span class="nt">&gt;</span>https://www.google.com/<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Which acts like this:</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/phishing.gif" alt="phishing attack"></p>

<p>The fact that HTML is actually sent to a user as part of a request 
opens up more vulnerabilities, because everyone has access to the layout
 and style that allowed you to create your site. For example, a hacker 
could go to <a href="https://cs50.harvard.edu/">bankofamerica.com</a>, 
copy all of their HTML, and paste it in their own site, creating a site 
that looks exactly like Bank of America’s. The hacker could then 
redirect the login form on the page so all usernames and passwords are 
sent to them. (Also, here’s the <a href="https://www.bankofamerica.com/">real Bank of America link</a>–just wanted to see if you were checking urls before clicking!)</p>

<a data-id="" id="https" style="top: -81.3333px;"></a><h2><a data-id="" href="#https">HTTPS</a></h2>

<p>As we discussed earlier in the course, most interactions that occur 
online follow HTTP protocol, although now more and more transactions use
 HTTPS, which is an encrypted version of HTTP. While using these 
protocols, information is transferred from one computer to another 
through a series of servers as pictured below.</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/servers.png" alt="transferring"></p>

<p>There is often no way to ensure that all of these transfers are 
secure, so it is important that all of this transferred information is <strong>encrypted</strong>,
 meaning that the characters of the message are altered so that the 
sender and receiver of the message can understand it, but no one else 
can.</p>

<a data-id="" id="secret-key-cryptography" style="top: -81.3333px;"></a><h3><a data-id="" href="#secret-key-cryptography">Secret-Key Cryptography</a></h3>

<p>One approach to this is known as <strong>Secret-Key Cryptography</strong>.
 In this approach, the sender and receiver both have access to a secret 
key that only they know. Then, the secret key is used by the sender to 
encrypt a message which is then sent to the recipient who uses the 
secret key to decrypt the message. This method is extremely secure, but 
it produces a big problem when it comes to practicality. In order for it
 to work, both the sender and the receiver must have access to the 
secret key, which means they must meet in person to exchange a key 
securely. With the number of different websites we interact with on a 
daily basis, it is clear that in-person meetups are not an option.</p>

<a data-id="" id="public-key-cryptography" style="top: -81.3333px;"></a><h3><a data-id="" href="#public-key-cryptography">Public-Key Cryptography</a></h3>

<p>An incredible advancement in cryptography that allows the internet to function as it does today is known as <strong>Public-Key Cryptography</strong>.
 In this method, there are two keys: one is public and can be shared, 
and the other must be kept private. Once these keys are established 
(there are several different mathematical methods for creating pairs of 
keys which could make up an entire course on their own, so we won’t 
discuss them here), a sender could look up the public key of a recipient
 and use it to encrypt a message, and then the recipient could use their
 private key to decrypt the message.  When we use HTTPS rather than 
HTTP, we know that our request is being secured using public-key 
encryption.</p>

<a data-id="" id="databases" style="top: -81.3333px;"></a><h2><a data-id="" href="#databases">Databases</a></h2>

<p>In addition to our requests and responses, we must also make sure 
that our databases are secure. One common thing we’ll need to store is 
user information, including usernames and passwords as in the table 
below:</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/passwords.png" alt="bad table"></p>

<p>However, you never actually want to store passwords in plaintext in 
case an unauthorized person gets access to your database. Instead, we’ll
 want to use a <strong>hash function</strong>, a function that takes in 
some text and outputs a seemingly random string, to create a hash of 
each password, as in the table below:</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/hashes.png" alt="good table"></p>

<p>It is important to note that a hash function is <strong>one-way</strong>,
 meaning it can turn a password into a hash, but cannot turn a hash back
 into a password. This means that any company that stores user 
information this way does not actually know any of the users’ passwords,
 meaning each time a user attempts to sign in, the entered password will
 be hashed and compared to the existing hash. Thankfully, this process 
is already handled for us by Django. One implication of this storage 
technique is that when a user forgets their password, a company has no 
way of telling them what their old password now, meaning they would have
 to make a new one.</p>

<p>There are some cases where you’ll have to decide as a developer how 
much information you are willing to leak. For example, many sites have a
 page for forgotten passwords that looks like this:</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/forgot0.png" alt="forgotten password?"></p>

<p>As a developer, you may want to include either a success or error message after submission:</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/sent.png" alt="success message"></p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/error.png" alt="error message"></p>

<p>But notice how by typing in emails, anyone could determine who has an
 email registered with that site. This could be totally fine in cases 
where whether or not a person uses the site is inconsequential (maybe 
Facebook), but extremely reckless if the fact that you are a member of a
 certain site could put you in danger (maybe an online support group for
 victims of abuse).</p>

<p>Another way data could be leaked is in the time it takes for a 
response to come back. It probably takes less time to reject someone 
with an invalid email than a person with a correct email address and a 
wrong password.</p>

<p>As we discussed earlier in the course, we must be ware of SQL 
Injection Attacks whenever we use straight SQL queries in our code.</p>

<a data-id="" id="apis" style="top: -81.3333px;"></a><h3><a data-id="" href="#apis">APIs</a></h3>

<p>We often use JavaScript in conjunction with APIs to build single-page
 applications. In the case when we build our own API, there are a few 
methods we can use to keep our API secure:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>API Keys</strong>: Only process requests from API clients who have a key you have provided to them.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Rate Limiting</strong>: Limit the number of requests any one user can make in a given time frame. This helps protect against <strong>Denial of Service (DOS) Attacks</strong>, in which a malicious user makes so many calls to your API that it crashes.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><strong>Route Authentication</strong>:
 There are many cases where we don’t want to give everyone access to all
 of our data, so we can use route authentication to make sure only 
specific users can see specific data.</li>
</ul>

<a data-id="" id="environment-variables" style="top: -81.3333px;"></a><h3><a data-id="" href="#environment-variables">Environment Variables</a></h3>

<p>Just as we want to avoid storing passwords in plaintext, we’ll want 
to avoid including API keys in our source code. One common way of 
avoiding this is to use <strong>environment variables</strong>, or 
variables that are stored in your operating system or server’s 
environment. Then, rather than including a string of text in our source 
code, we can include a reference to an environment variable.</p>

<a data-id="" id="javascript" style="top: -81.3333px;"></a><h2><a data-id="" href="#javascript">JavaScript</a></h2>

<p>There are a few types of attacks that malicious users may attempt using JavaScript. One example is knwon as <strong>Cross-Site Scripting</strong>,
 which is when a user writes their own  JavaScript code and runs it on 
your website. For example, let’s imagine we have a Django application 
with a single URL:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">"&lt;path:path&gt;"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"index"</span><span class="p">)</span>
<span class="p">]</span>
</code></pre></div></div>

<p>and a single view:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="sa">f</span><span class="s">"Requested Path: </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>This website essentially tells the user what URL they have navigated to:</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/pathworks.png" alt="good path"></p>

<p>But a user can now easily insert some Javascript into the page by typing it in the url:</p>

<p><img src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/inject.gif" alt="bad path"></p>

<p>While this <code class="language-plaintext highlighter-rouge">alert</code> example is fairly harmless, it wouldn’t be all that more difficult to include some JavaScript that manipulates the DOM or uses <code class="language-plaintext highlighter-rouge">fetch</code> to send a request.</p>

<a data-id="" id="cross-site-request-forgery" style="top: -81.3333px;"></a><h3><a data-id="" href="#cross-site-request-forgery">Cross-Site Request Forgery</a></h3>

<p>We already discussed how we can use Django to prevent CSRF attacks, 
but let’s take a look at what could happen without this protection. As 
an example, imagine a bank has a URL you could visit that transfers 
money out of your account. A person could easily create a link that 
would make this transfer:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://yourbank.com/transfer?to=brian&amp;amt=2800"</span><span class="nt">&gt;</span>
    Click Here!
<span class="nt">&lt;/a&gt;</span> 
</code></pre></div></div>

<p>This attack can be even more subtle than a link. If the URL is put in
 an image, then it will be accessed as your browser attempts to load the
 image:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"http://yourbank.com/transfer?to=brian&amp;amt=2800"</span><span class="nt">&gt;</span> 
</code></pre></div></div>

<p>Because of this, whenever you are building an application that can 
accept some state change, it should be done using a POST request. Even 
if the bank requires a POST request, hidden form fields can still trick 
users into accidentally submitting a request. The following form doesn’t
 even wait for the user to click; it automatically submits!</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;body</span> <span class="na">onload=</span><span class="s">"document.forms[0].submit()"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"https://yourbank.com/transfer"</span>
    <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"to"</span> <span class="na">value=</span><span class="s">"brian"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"amt"</span> <span class="na">value=</span><span class="s">"2800"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Click Here!"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p>The above is an example of what <strong>Cross-Site Request Forgery</strong>
 might look like. We can stop attacks such as these by creating a CSRF 
token when loading a webpage, and then only accepting forms with a valid
 token.</p>

<a data-id="" id="whats-next" style="top: -81.3333px;"></a><h2><a data-id="" href="#whats-next">What’s next?</a></h2>

<p>We’ve discussed many web frameworks in this class such as Django and 
React, but there are more frameworks you might be interested in trying:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Server-Side
    <ul class="fa-ul">
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://expressjs.com/">Express.js</a></li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://rubyonrails.org/">Ruby on Rails</a></li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://flask.palletsprojects.com/en/1.1.x/">Flask</a></li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>…</li>
    </ul>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Client-Side
    <ul class="fa-ul">
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://angularjs.org/">Angular JS</a></li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://reactjs.org/">React</a></li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://vuejs.org/">Vue.js</a></li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://reactnative.dev/">React Native</a></li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>…</li>
    </ul>
  </li>
</ul>

<p>In the future, you may also want to be able to deploy your site to 
the web, which you can do through a number of different services:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://aws.amazon.com/getting-started/hands-on/websites/">Amazon Web Services</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://github.com/">GitHub</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.heroku.com/">Heroku</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://app.netlify.com/">Netlify</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cloud.google.com/">Google Cloud</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://azure.microsoft.com/en-gb/">Microsoft Azure</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>…</li>
</ul>

<p>We’ve come a long way and covered a lot of material since the 
beginning of this course, but there’s still a lot to learn in the world 
of web programming. Although it can be overwhelming at times, one of the
 best ways to learn more is to jump into a project and see how far you 
can run with it. We believe that at this point you have a strong 
foundation in the concepts of web design, and that you have what it 
takes to turn an idea into your own working website!</p>


                </main>

            </div>

        </div>

        
 
        <script src="Lecture%208%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/page.js"></script>

    


</body></html>