<!DOCTYPE html>
<html class="wf-ptsans-n4-active wf-ptsans-n7-active wf-active" lang="en-us"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width"><meta property="og:description" content="This course picks up where Harvard University's CS50 leaves off, diving more deeply into the design and implementation of web apps with Python, JavaScript, and SQL using frameworks like Django, React, and Bootstrap. Topics include database design, scalability, security, and user experience. Through hands-on projects, students learn to write and use APIs, create interactive UIs, and leverage cloud services like GitHub and Heroku. By semester’s end, students emerge with knowledge and experience in principles, languages, and tools that empower them to design and deploy applications on the Internet.">

        <meta property="og:image" content="https://img.youtube.com/vi/24Kf3v7kZyE/maxresdefault.jpg"><meta property="og:title" content="Lecture 3 - CS50's Web Programming with Python and JavaScript">

        <link href="https://cs50.harvard.edu/web/2020/favicon.ico?1645555620" rel="icon">

        <!-- https://fonts.google.com/specimen/PT+Sans?query=PT+Sans&selection.family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700 -->
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/webfont.js"></script>

        <!-- http://getbootstrap.com/docs/4.6/getting-started/introduction/ -->
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/jquery.js"></script>
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap.js"></script>

        <!-- https://bootstrap-table.com/docs/getting-started/introduction/ -->
        <link href="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table.css" rel="stylesheet">
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table.js"></script>
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bootstrap-table-mobile.js"></script>

        <!-- https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use -->
        <link href="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/all.css" rel="stylesheet">

        <!-- https://moment.github.io/luxon/ -->
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/luxon.js"></script>

        <!-- http://docs.mathjax.org/ -->
        <!-- https://www.jsdelivr.com/package/npm/mathjax?path=es5 -->
        <script crossorigin="anonymous" integrity="sha256-+nfSJ1LiSvANSK3wvi6FjM+oFwoIQvURU1frozp5z6o=" src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/tex-chtml.js"></script><style type="text/css">.CtxtMenu_InfoClose {  top:.2em; right:.2em;}
.CtxtMenu_InfoContent {  overflow:auto; text-align:left; font-size:80%;  padding:.4em .6em; border:1px inset; margin:1em 0px;  max-height:20em; max-width:30em; background-color:#EEEEEE;  white-space:normal;}
.CtxtMenu_Info.CtxtMenu_MousePost {outline:none;}
.CtxtMenu_Info {  position:fixed; left:50%; width:auto; text-align:center;  border:3px outset; padding:1em 2em; background-color:#DDDDDD;  color:black;  cursor:default; font-family:message-box; font-size:120%;  font-style:normal; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 15px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius:15px;               /* Safari and Chrome */  -moz-border-radius:15px;                  /* Firefox */  -khtml-border-radius:15px;                /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color="gray", Positive="true"); /* IE */}
</style><style type="text/css">.CtxtMenu_MenuClose {  position:absolute;  cursor:pointer;  display:inline-block;  border:2px solid #AAA;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  font-family: "Courier New", Courier;  font-size:24px;  color:#F0F0F0}
.CtxtMenu_MenuClose span {  display:block; background-color:#AAA; border:1.5px solid;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  line-height:0;  padding:8px 0 6px     /* may need to be browser-specific */}
.CtxtMenu_MenuClose:hover {  color:white!important;  border:2px solid #CCC!important}
.CtxtMenu_MenuClose:hover span {  background-color:#CCC!important}
.CtxtMenu_MenuClose:hover:focus {  outline:none}
</style><style type="text/css">.CtxtMenu_Menu {  position:absolute;  background-color:white;  color:black;  width:auto; padding:5px 0px;  border:1px solid #CCCCCC; margin:0; cursor:default;  font: menu; text-align:left; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 5px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius: 5px;             /* Safari and Chrome */  -moz-border-radius: 5px;                /* Firefox */  -khtml-border-radius: 5px;              /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */}
.CtxtMenu_MenuItem {  padding: 1px 2em;  background:transparent;}
.CtxtMenu_MenuArrow {  position:absolute; right:.5em; padding-top:.25em; color:#666666;  font-family: null; font-size: .75em}
.CtxtMenu_MenuActive .CtxtMenu_MenuArrow {color:white}
.CtxtMenu_MenuArrow.CtxtMenu_RTL {left:.5em; right:auto}
.CtxtMenu_MenuCheck {  position:absolute; left:.7em;  font-family: null}
.CtxtMenu_MenuCheck.CtxtMenu_RTL { right:.7em; left:auto }
.CtxtMenu_MenuRadioCheck {  position:absolute; left: .7em;}
.CtxtMenu_MenuRadioCheck.CtxtMenu_RTL {  right: .7em; left:auto}
.CtxtMenu_MenuInputBox {  padding-left: 1em; right:.5em; color:#666666;  font-family: null;}
.CtxtMenu_MenuInputBox.CtxtMenu_RTL {  left: .1em;}
.CtxtMenu_MenuComboBox {  left:.1em; padding-bottom:.5em;}
.CtxtMenu_MenuSlider {  left: .1em;}
.CtxtMenu_SliderValue {  position:absolute; right:.1em; padding-top:.25em; color:#333333;  font-size: .75em}
.CtxtMenu_SliderBar {  outline: none; background: #d3d3d3}
.CtxtMenu_MenuLabel {  padding: 1px 2em 3px 1.33em;  font-style:italic}
.CtxtMenu_MenuRule {  border-top: 1px solid #DDDDDD;  margin: 4px 3px;}
.CtxtMenu_MenuDisabled {  color:GrayText}
.CtxtMenu_MenuActive {  background-color: #606872;  color: white;}
.CtxtMenu_MenuDisabled:focus {  background-color: #E8E8E8}
.CtxtMenu_MenuLabel:focus {  background-color: #E8E8E8}
.CtxtMenu_ContextMenu:focus {  outline:none}
.CtxtMenu_ContextMenu .CtxtMenu_MenuItem:focus {  outline:none}
.CtxtMenu_SelectionMenu {  position:relative; float:left;  border-bottom: none; -webkit-box-shadow:none; -webkit-border-radius:0px; }
.CtxtMenu_SelectionItem {  padding-right: 1em;}
.CtxtMenu_Selection {  right: 40%; width:50%; }
.CtxtMenu_SelectionBox {  padding: 0em; max-height:20em; max-width: none;  background-color:#FFFFFF;}
.CtxtMenu_SelectionDivider {  clear: both; border-top: 2px solid #000000;}
.CtxtMenu_Menu .CtxtMenu_MenuClose {  top:-10px; left:-10px}
</style>

        <!-- https://github.com/verlok/vanilla-lazyload -->
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/intersection-observer.js"></script>
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/lazyload.js"></script>

        <!-- https://github.com/davidjbradshaw/iframe-resizer -->
        <!-- https://www.jsdelivr.com/package/npm/iframe-resizer?path=js -->
        <script crossorigin="anonymous" integrity="sha256-S8f0Q/V9VcfrqYgWo9EFS9zuDMdPTBMC+CBW0RjxQbs=" src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/iframeResizer.js"></script>

        <!-- https://github.com/scratchblocks/scratchblocks/releases -->
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/scratchblocks.js"></script><style><![CDATA[ .sb-label {
      font-family: Lucida Grande, Verdana, Arial, DejaVu Sans, sans-serif;
      font-weight: bold;
      fill: #fff;
      font-size: 10px;
      word-spacing: +1px;
    }

    .sb-obsolete { fill: #d42828; }
    .sb-motion { fill: #4a6cd4; }
    .sb-looks { fill: #8a55d7; }
    .sb-sound { fill: #bb42c3; }
    .sb-pen { fill: #0e9a6c;  }
    .sb-events { fill: #c88330; }
    .sb-control { fill: #e1a91a; }
    .sb-sensing { fill: #2ca5e2; }
    .sb-operators { fill: #5cb712; }
    .sb-variables { fill: #ee7d16; }
    .sb-list { fill: #cc5b22 }
    .sb-custom { fill: #632d99; }
    .sb-custom-arg { fill: #5947b1; }
    .sb-extension { fill: #4b4a60; }
    .sb-grey { fill: #969696; }

    .sb-bevel {
      filter: url(#bevelFilter);
    }

    .sb-input {
      filter: url(#inputBevelFilter);
    }
    .sb-input-number,
    .sb-input-string,
    .sb-input-number-dropdown {
      fill: #fff;
    }
    .sb-literal-number,
    .sb-literal-string,
    .sb-literal-number-dropdown,
    .sb-literal-dropdown {
      font-weight: normal;
      font-size: 9px;
      word-spacing: 0;
    }
    .sb-literal-number,
    .sb-literal-string,
    .sb-literal-number-dropdown {
      fill: #000;
    }

    .sb-darker {
      filter: url(#inputDarkFilter);
    }

    .sb-outline {
      stroke: #fff;
      stroke-opacity: 0.2;
      stroke-width: 2;
      fill: none;
    }

    .sb-define-hat-cap {
      stroke: #632d99;
      stroke-width: 1;
      fill: #8e2ec2;
    }

    .sb-comment {
      fill: #ffffa5;
      stroke: #d0d1d2;
      stroke-width: 1;
    }
    .sb-comment-line {
      fill: #ffff80;
    }
    .sb-comment-label {
      font-family: Helevetica, Arial, DejaVu Sans, sans-serif;
      font-weight: bold;
      fill: #5c5d5f;
      word-spacing: 0;
      font-size: 12px;
    }

    .sb-diff {
      fill: none;
      stroke: #000;
    }
    .sb-diff-ins {
      stroke-width: 2px;
    }
    .sb-diff-del {
      stroke-width: 3px;
    }
  ]]></style><style><![CDATA[ .sb3-label {
      font: 500 12pt Helevetica Neue, Helvetica, sans-serif;
      fill: #fff;
      word-spacing: +1pt;
    }

    .sb3-motion { fill: #4c97ff; stroke: #3373cc; }
    .sb3-motion-alt { fill: #4280d7; }
    .sb3-motion-dark { fill: #4c97ff; }
    .sb3-looks { fill: #9966ff; stroke: #774dcb; }
    .sb3-looks-alt { fill: #855cd6; }
    .sb3-looks-dark { fill: #bd42bd; }
    .sb3-sound { fill: #cf63cf; stroke: #bd42bd; }
    .sb3-sound-alt { fill: #c94fc9; }
    .sb3-sound-dark { fill: #bd42bd; }
    .sb3-control { fill: #ffab19; stroke: #cf8b17; }
    .sb3-control-alt { fill: #ec9c13; }
    .sb3-control-dark { fill: #cf8b17; }
    .sb3-events { fill: #ffbf00; stroke: #cc9900; }
    .sb3-events-alt { fill: #e6ac00; }
    .sb3-events-dark { fill: #cc9900; }
    .sb3-sensing { fill: #5cb1d6; stroke: #2e8eb8; }
    .sb3-sensing-alt { fill: #47a8d1; }
    .sb3-sensing-dark { fill: #2e8eb8; }
    .sb3-operators { fill: #59c059; stroke: #389438; }
    .sb3-operators-alt { fill: #46b946; }
    .sb3-operators-dark { fill: #389438; }
    .sb3-variables { fill: #ff8c1a; stroke: #db6e00; }
    .sb3-variables-alt { fill: #ff8000; }
    .sb3-variables-dark { fill: #db6e00; }
    .sb3-list { fill: #ff661a; stroke: #e64d00; }
    .sb3-list-alt { fill: #ff5500; }
    .sb3-list-dark { fill: #e64d00; }
    .sb3-custom { fill: #ff6680; stroke: #ff3355; }
    .sb3-custom-alt { fill: #ff4d6a; }
    .sb3-custom-dark { fill: #ff3355; }
    .sb3-custom-arg { fill: #ff6680; stroke: #ff3355; }

    /* extension blocks, e.g. pen */
    .sb3-extension { fill: #0fbd8c; stroke: #0b8e69; }
    .sb3-extension-alt { fill: #0da57a; }
    .sb3-extension-line { stroke: #0da57a; }
    .sb3-extension-dark { fill: #0b8e69; }

    /* obsolete colors: chosen by hand, indicates invalid blocks */
    .sb3-obsolete { fill: #ed4242; stroke: #ca2b2b; }
    .sb3-obsolete-alt { fill: #db3333; }
    .sb3-obsolete-dark { fill: #ca2b2b; }

    /* grey: special color from the Scratch 3.0 design mockups */
    .sb3-grey { fill: #bfbfbf; stroke: #909090; }
    .sb3-grey-alt { fill: #b2b2b2; }
    .sb3-grey-dark { fill: #909090; }

    .sb3-input-color {
      stroke: #fff;
    }

    .sb3-input-number,
    .sb3-input-string {
      fill: #fff;
    }
    .sb3-literal-number,
    .sb3-literal-string,
    .sb3-literal-number-dropdown,
    .sb3-literal-dropdown {
      word-spacing: 0;
    }
    .sb3-literal-number,
    .sb3-literal-string {
      fill: #575e75;
    }

    .sb3-comment {
      fill: #ffffa5;
      stroke: #d0d1d2;
      stroke-width: 1;
    }
    .sb3-comment-line {
      fill: #ffff80;
    }
    .sb3-comment-label {
      font: 400 12pt Helevetica Neue, Helvetica, sans-serif;
      fill: #000;
      word-spacing: 0;
    }

    .sb3-diff {
      fill: none;
      stroke: #000;
    }
    .sb3-diff-ins {
      stroke-width: 2px;
    }
    .sb3-diff-del {
      stroke-width: 3px;
    }
  ]]></style>

        

        <link href="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/page.css" rel="stylesheet">
        <link rel="stylesheet" href="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/css.css" media="all"><script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/jekyll-theme-cs50.js"></script>

        <script>
            window.CS50 = {
                local: {"day":"numeric","hour":"numeric","minute":"numeric","month":"long","timeZoneName":"short","weekday":"long","year":"numeric"},
                locale: "en",
                tz: "America/New_York"
            };
        </script>

        <title>Lecture 3 - CS50's Web Programming with Python and JavaScript</title>


    <style id="MJX-CHTML-styles">
mjx-container[jax="CHTML"] {
  line-height: 0;
}

mjx-container [space="1"] {
  margin-left: .111em;
}

mjx-container [space="2"] {
  margin-left: .167em;
}

mjx-container [space="3"] {
  margin-left: .222em;
}

mjx-container [space="4"] {
  margin-left: .278em;
}

mjx-container [space="5"] {
  margin-left: .333em;
}

mjx-container [rspace="1"] {
  margin-right: .111em;
}

mjx-container [rspace="2"] {
  margin-right: .167em;
}

mjx-container [rspace="3"] {
  margin-right: .222em;
}

mjx-container [rspace="4"] {
  margin-right: .278em;
}

mjx-container [rspace="5"] {
  margin-right: .333em;
}

mjx-container [size="s"] {
  font-size: 70.7%;
}

mjx-container [size="ss"] {
  font-size: 50%;
}

mjx-container [size="Tn"] {
  font-size: 60%;
}

mjx-container [size="sm"] {
  font-size: 85%;
}

mjx-container [size="lg"] {
  font-size: 120%;
}

mjx-container [size="Lg"] {
  font-size: 144%;
}

mjx-container [size="LG"] {
  font-size: 173%;
}

mjx-container [size="hg"] {
  font-size: 207%;
}

mjx-container [size="HG"] {
  font-size: 249%;
}

mjx-container [width="full"] {
  width: 100%;
}

mjx-box {
  display: inline-block;
}

mjx-block {
  display: block;
}

mjx-itable {
  display: inline-table;
}

mjx-row {
  display: table-row;
}

mjx-row > * {
  display: table-cell;
}

mjx-mtext {
  display: inline-block;
}

mjx-mstyle {
  display: inline-block;
}

mjx-merror {
  display: inline-block;
  color: red;
  background-color: yellow;
}

mjx-mphantom {
  visibility: hidden;
}

mjx-assistive-mml {
  position: absolute !important;
  top: 0px;
  left: 0px;
  clip: rect(1px, 1px, 1px, 1px);
  padding: 1px 0px 0px 0px !important;
  border: 0px !important;
  display: block !important;
  width: auto !important;
  overflow: hidden !important;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

mjx-assistive-mml[display="block"] {
  width: 100% !important;
}

mjx-c::before {
  display: block;
  width: 0;
}

.MJX-TEX {
  font-family: MJXZERO, MJXTEX;
}

.TEX-B {
  font-family: MJXZERO, MJXTEX-B;
}

.TEX-I {
  font-family: MJXZERO, MJXTEX-I;
}

.TEX-MI {
  font-family: MJXZERO, MJXTEX-MI;
}

.TEX-BI {
  font-family: MJXZERO, MJXTEX-BI;
}

.TEX-S1 {
  font-family: MJXZERO, MJXTEX-S1;
}

.TEX-S2 {
  font-family: MJXZERO, MJXTEX-S2;
}

.TEX-S3 {
  font-family: MJXZERO, MJXTEX-S3;
}

.TEX-S4 {
  font-family: MJXZERO, MJXTEX-S4;
}

.TEX-A {
  font-family: MJXZERO, MJXTEX-A;
}

.TEX-C {
  font-family: MJXZERO, MJXTEX-C;
}

.TEX-CB {
  font-family: MJXZERO, MJXTEX-CB;
}

.TEX-FR {
  font-family: MJXZERO, MJXTEX-FR;
}

.TEX-FRB {
  font-family: MJXZERO, MJXTEX-FRB;
}

.TEX-SS {
  font-family: MJXZERO, MJXTEX-SS;
}

.TEX-SSB {
  font-family: MJXZERO, MJXTEX-SSB;
}

.TEX-SSI {
  font-family: MJXZERO, MJXTEX-SSI;
}

.TEX-SC {
  font-family: MJXZERO, MJXTEX-SC;
}

.TEX-T {
  font-family: MJXZERO, MJXTEX-T;
}

.TEX-V {
  font-family: MJXZERO, MJXTEX-V;
}

.TEX-VB {
  font-family: MJXZERO, MJXTEX-VB;
}

mjx-stretchy-v mjx-c, mjx-stretchy-h mjx-c {
  font-family: MJXZERO, MJXTEX-S1, MJXTEX-S4, MJXTEX, MJXTEX-A ! important;
}

@font-face /* 0 */ {
  font-family: MJXZERO;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff") format("woff");
}

@font-face /* 1 */ {
  font-family: MJXTEX;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff") format("woff");
}

@font-face /* 2 */ {
  font-family: MJXTEX-B;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Bold.woff") format("woff");
}

@font-face /* 3 */ {
  font-family: MJXTEX-I;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff") format("woff");
}

@font-face /* 4 */ {
  font-family: MJXTEX-MI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Main-Italic.woff") format("woff");
}

@font-face /* 5 */ {
  font-family: MJXTEX-BI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Math-BoldItalic.woff") format("woff");
}

@font-face /* 6 */ {
  font-family: MJXTEX-S1;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff") format("woff");
}

@font-face /* 7 */ {
  font-family: MJXTEX-S2;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size2-Regular.woff") format("woff");
}

@font-face /* 8 */ {
  font-family: MJXTEX-S3;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size3-Regular.woff") format("woff");
}

@font-face /* 9 */ {
  font-family: MJXTEX-S4;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Size4-Regular.woff") format("woff");
}

@font-face /* 10 */ {
  font-family: MJXTEX-A;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_AMS-Regular.woff") format("woff");
}

@font-face /* 11 */ {
  font-family: MJXTEX-C;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Regular.woff") format("woff");
}

@font-face /* 12 */ {
  font-family: MJXTEX-CB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Bold.woff") format("woff");
}

@font-face /* 13 */ {
  font-family: MJXTEX-FR;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Regular.woff") format("woff");
}

@font-face /* 14 */ {
  font-family: MJXTEX-FRB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Bold.woff") format("woff");
}

@font-face /* 15 */ {
  font-family: MJXTEX-SS;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Regular.woff") format("woff");
}

@font-face /* 16 */ {
  font-family: MJXTEX-SSB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Bold.woff") format("woff");
}

@font-face /* 17 */ {
  font-family: MJXTEX-SSI;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Italic.woff") format("woff");
}

@font-face /* 18 */ {
  font-family: MJXTEX-SC;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Script-Regular.woff") format("woff");
}

@font-face /* 19 */ {
  font-family: MJXTEX-T;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Typewriter-Regular.woff") format("woff");
}

@font-face /* 20 */ {
  font-family: MJXTEX-V;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Regular.woff") format("woff");
}

@font-face /* 21 */ {
  font-family: MJXTEX-VB;
  src: url("https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Bold.woff") format("woff");
}
</style></head>

    <body class="">

        <div class="alert fixed-top mb-0 rounded-0 shadow alert-success alert-dismissible" data-alert="success dismissible" data-hash="edc24fffed7a3a9ad8c189ef5e2aca41" id="alert" role="alert">
            <button aria-label="Close" class="btn-close" data-bs-dismiss="alert" type="button"></button><p>Interested in <a href="https://cs50.harvard.edu/web/2020/#how-to-take-this-course" class="alert-link">a verified certificate, a professional certificate, or transfer credit and accreditation</a>?
And get vaccinated (as soon as it’s available to you). 💉 <a href="https://www.who.int/news-room/feature-stories/detail/getting-the-covid-19-vaccine" class="alert-link">Here’s why</a>. <a href="https://www.google.com/search?q=covid-19+vaccine+finder" class="alert-link">Here’s how</a>.</p></div>
        

        <div class="container-fluid">

            <div class="row">

                <aside class="col-md" style="height: 513.667px; top: 81.3333px;">
 
                    <header><h1 data-id="cs50s-web-programming-with-python-and-javascript"><a href="https://cs50.harvard.edu/web/2020/">CS50’s Web Programming with Python and JavaScript</a></h1>

<p>OpenCourseWare</p>

<p><a class="pr-1 small" href="https://cs50.harvard.edu/donate">Donate<i aria-hidden="true" class="fas fa-external-link-alt ps-2"></i></a></p>

<p><a href="https://brianyu.me/">Brian Yu</a><br>
<a href="mailto:brian@cs.harvard.edu">brian@cs.harvard.edu</a></p>

<p><a href="https://cs.harvard.edu/malan/">David J. Malan</a>
<br>
<a href="mailto:malan@harvard.edu">malan@harvard.edu</a>
<br>
<a class="mr-1" href="https://www.facebook.com/dmalan"><i aria-hidden="true" class="fab fa-facebook-f" title="Facebook"></i><span class="sr-only">Facebook</span></a>
<a class="mr-1" href="https://github.com/dmalan"><i aria-hidden="true" class="fab fa-github" title="GitHub"></i><span class="sr-only">GitHub</span></a>
<a class="mr-1" href="https://www.instagram.com/davidjmalan/"><i aria-hidden="true" class="fab fa-instagram" title="Instagram"></i><span class="sr-only">Instagram</span></a>
<a class="mr-1" href="https://www.linkedin.com/in/malan/"><i aria-hidden="true" class="fab fa-linkedin" title="LinkedIn"></i><span class="sr-only">LinkedIn</span></a>
<a class="mr-1" href="https://orcid.org/0000-0001-5338-2522"><i aria-hidden="true" class="fab fa-orcid" title="ORCID"></i><span class="sr-only">ORCID</span></a>
<a class="mr-1" href="https://www.quora.com/profile/David-J-Malan"><i aria-hidden="true" class="fab fa-quora" title="Quora"></i><span class="sr-only">Quora</span></a>
<a class="mr-1" href="https://www.reddit.com/user/davidjmalan"><i aria-hidden="true" class="fab fa-reddit-alien" title="Reddit"></i><span class="sr-only">Reddit</span></a>
<a class="mr-1" href="https://www.tiktok.com/@davidjmalan"><i aria-hidden="true" class="fab fa-tiktok" title="TikTok"></i><span class="sr-only">Twitter</span></a>
<a class="mr-1" href="https://twitter.com/davidjmalan"><i aria-hidden="true" class="fab fa-twitter" title="Twitter"></i><span class="sr-only">Twitter</span></a></p></header>

                    

                    <button aria-controls="nav" aria-expanded="false" class="btn btn-sm collapsed d-md-none" data-bs-target="aside &gt; nav" data-bs-toggle="collapse">
                        Menu
                    </button>

                    <nav class="collapse d-md-block" id="nav"><hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/movie/">🍿 CS50x Movie Night 2022</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/puzzles/"><i class="fas fa-puzzle-piece pe-2"></i>CS50x Puzzle Day 2022</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/prepare/"><i class="fas fa-book pe-2"></i>How to Prepare for Technical Interviews</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.ly/zoom"><i class="fas fa-video pe-2"></i>Zoom Meetings</a></li>
</ul>

<hr>

<ol start="0">
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/0/">HTML, CSS</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/1/">Git</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/2/">Python</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/3/">Django</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/4/">SQL, Models, and Migrations</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/5/">JavaScript</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/6/">User Interfaces</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/7/">Testing, CI/CD</a></li>
  <li><a href="https://cs50.harvard.edu/web/2020/weeks/8/">Scalability and Security</a></li>
</ol>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/honesty/">Academic Honesty</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/certificate/">CS50 Certificate</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/faqs/">FAQs</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.me/cs50w">Gradebook</a></li>
</ul>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed">Ed Discussion</a> for Q&amp;A</li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://us.edstem.org/quickstart/ed-discussion.pdf">Quick Start Guide</a></li>
</ul>

<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/web">edX</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://itunes.apple.com/us/course/id1505432709">iTunes U</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.youtube.com/playlist?list=PLhQjrBD2T380xvFSUmToMMzERZ3qB5Ueu">YouTube</a></li>
</ul>

<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.noticeable.news/">Changelog</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.statuspage.io/">Status Page</a></li>
</ul>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/web/2020/communities/"><strong>Communities</strong></a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.clubhouse.com/club/cs50">Clubhouse</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://discord.gg/cs50">Discord</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed">Ed</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/groups/cs50/">Facebook Group</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/cs50/">Facebook Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://github.com/cs50">GitHub</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://gitter.im/cs50/x">Gitter</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://instagram.com/cs50">Instagram</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/groups/7437240/">LinkedIn Group</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/school/CS50/">LinkedIn Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.medium.com/">Medium</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.quora.com/topic/CS50">Quora</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.reddit.com/r/cs50/">Reddit</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/slack">Slack</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.snapchat.com/add/cs50">Snapchat</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://soundcloud.com/cs50">SoundCloud</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.stackexchange.com/">Stack Exchange</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.tiktok.com/@cs50">TikTok</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://twitter.com/cs50">Twitter</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://www.youtube.com/subscription_center?add_user=cs50tv">YouTube</a></li>
</ul>

<hr>

<p><a href="https://cs50.harvardshop.com/"><img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/GGMdcKt.png" alt="Harvard Shop"></a></p>

<hr>

<p><a href="https://cs50.harvard.edu/web/2020/license/" class="small"><i class="fab fa-creative-commons me-1"></i>License</a></p></nav>

                    <footer></footer>

                </aside>

                <main class="col-md" style="margin-bottom: 0px; margin-top: 81.3333px;">

                    <a data-id="" id="lecture-3" style="top: -81.3333px;"></a><h1 class="no_toc"><a data-id="" href="#lecture-3">Lecture 3</a></h1>

<ul id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a></li>
  <li><a href="#web-applications" id="markdown-toc-web-applications">Web Applications</a></li>
  <li><a href="#http" id="markdown-toc-http">HTTP</a></li>
  <li><a href="#django" id="markdown-toc-django">Django</a></li>
  <li><a href="#routes" id="markdown-toc-routes">Routes</a></li>
  <li><a href="#templates" id="markdown-toc-templates">Templates</a>    <ul>
      <li><a href="#conditionals" id="markdown-toc-conditionals">Conditionals:</a></li>
      <li><a href="#styling" id="markdown-toc-styling">Styling</a></li>
    </ul>
  </li>
  <li><a href="#tasks" id="markdown-toc-tasks">Tasks</a></li>
  <li><a href="#forms" id="markdown-toc-forms">Forms</a>    <ul>
      <li><a href="#django-forms" id="markdown-toc-django-forms">Django Forms</a></li>
    </ul>
  </li>
  <li><a href="#sessions" id="markdown-toc-sessions">Sessions</a></li>
</ul>

<a data-id="" id="introduction" style="top: -81.3333px;"></a><h2><a data-id="" href="#introduction">Introduction</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>So
 far, we’ve discussed how to build simple web pages using HTML and CSS, 
and how to use Git and GitHub in order to keep track of changes to our 
code and collaborate with others. We also familiarized ourselves with 
the Python programming language.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Today, we’ll work on using Python’s <code class="language-plaintext highlighter-rouge">Django</code> framework in order to create dynamic applications.</li>
</ul>

<a data-id="" id="web-applications" style="top: -81.3333px;"></a><h2><a data-id="" href="#web-applications">Web Applications</a></h2>

<p>So far, all of the web applications we’ve written have been <strong>static</strong>.
 This means that every single time we open that web page, it looks 
exactly the same. Many websites we visit every day, however, change 
every time we visit them. If you visit the websites of the <a href="https://www.nytimes.com/">New York Times</a> or <a href="https://www.facebook.com/">Facebook</a>,
 for example, you’ll most likely see different things today than you 
will tomorrow. For large sites like those, it would be unreasonable for 
employees to have to manually edit a large HTML file every time a change
 is made, which is where <strong>dynamic</strong> websites can be 
extremely useful. A dynamic website is one that takes advantage of a 
programming language (such as Python) to dynamically generate HTML and 
CSS files. During this lecture, we’ll learn how to create our first 
dynamic applications.</p>

<a data-id="" id="http" style="top: -81.3333px;"></a><h2><a data-id="" href="#http">HTTP</a></h2>

<p>HTTP, or HyperText Transfer Protocol, is a widely-accepted protocol 
for how messages are transfered back and forth across the internet. 
Typically, information online is passed between a client (user) and a 
server.
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/client_server.png" alt="Client and Server"></p>

<p>In this protocol, the client will send a <strong>request</strong> to the server, that might look something like the one below. In the example below, <code class="language-plaintext highlighter-rouge">GET</code> is simply a type of request, one of three we’ll discuss in this course. The <code class="language-plaintext highlighter-rouge">/</code>
 typically indicates that we’re looking for the website’s home page, and
 the three dots indicate that we could be passing in more information as
 well.
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/request.png" alt="Request"></p>

<p>After receiving a request, a server will then send back an HTTP 
response, which might look something like the one below. Such a response
 will include the HTTP version, a status code (200 means OK), a 
description of the content, and then some additional information.
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/response.png" alt="Response"></p>

<p>200 is just one of many status codes, some of which you may have seen in the past:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/codes.png" alt="Codes"></p>

<a data-id="" id="django" style="top: -81.3333px;"></a><h2><a data-id="" href="#django">Django</a></h2>

<p><a href="https://www.djangoproject.com/">Django</a> is a Python-based
 web framework that will allow us to write Python code that dynamically 
generates HTML and CSS. The advantage to using a framework like Django 
is that a lot of code is already written for us that we can take 
advantage of.</p>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>To get started, we’ll have to install Django, which means you’ll also have to <a href="https://pip.pypa.io/en/stable/installing/">install pip</a> if you haven’t already done so.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Once you have Pip installed, you can run <code class="language-plaintext highlighter-rouge">pip3 install Django</code> in your terminal to install Django.</li>
</ul>

<p>After installing Django, we can go through the steps of creating a new Django project:</p>
<ol>
  <li>Run <code class="language-plaintext highlighter-rouge">django-admin startproject PROJECT_NAME</code> to create a number of starter files for our project.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">cd PROJECT_NAME</code> to navigate into your new project’s directory.</li>
  <li>Open the directory in your text editor of choice. You’ll notice 
that some files have been created for you. We won’t need to look at most
 of these for now, but there are three that will be very important from 
the start:
    <ul class="fa-ul">
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">manage.py</code> is what we use to execute commands on our terminal. We won’t have to edit it, but we’ll use it often.</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">settings.py</code>
 contains some important configuration settings for our new project. 
There are some default settings, but we may wish to change some of them 
from time to time.</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">urls.py</code> contains directions for where users should be routed after navigating to a certain URL.</li>
    </ul>
  </li>
  <li>Start the project by running <code class="language-plaintext highlighter-rouge">python manage.py runserver</code>.
 This will open a development server, which you can access by visiting 
the URL provided. This development server is being run locally on your 
machine, meaning other people cannot access your website. This should 
bring you to a default landing page:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/landing.png" alt="Landing Page"></li>
  <li>Next, we’ll have to create an application. Django projects are split into one or more <strong>applications</strong>.
 Most of our projects will only require one application, but larger 
sites can make use of this ability to split a site into multiple apps. 
To create an application, we run <code class="language-plaintext highlighter-rouge">python manage.py startapp APP_NAME</code>. This will create some additional directories and files that will be useful shortly, including <code class="language-plaintext highlighter-rouge">views.py</code>.</li>
  <li>Now, we have to install our new app. To do this, we go to <code class="language-plaintext highlighter-rouge">settings.py</code>, scroll down to the list of <code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code>, and add the name of our new application to this list.
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/installed.png" alt="installed apps"></li>
</ol>

<a data-id="" id="routes" style="top: -81.3333px;"></a><h2><a data-id="" href="#routes">Routes</a></h2>

<p>Now, in order to get started with our application:</p>
<ol>
  <li>
    <p>Next, we’ll navigate to <code class="language-plaintext highlighter-rouge">views.py</code>.
 This file will contain a number of different views, and we can think of
 a view for now as one page the user might like to see. To create our 
first view, we’ll write a function that takes in a <code class="language-plaintext highlighter-rouge">request</code>. For now, we’ll simply return an <code class="language-plaintext highlighter-rouge">HttpResponse</code>
 (A very simple response that includes a response code of 200 and a 
string of text that can be displayed in a web browser) of “Hello, 
World”. In order to do this, we have include <code class="language-plaintext highlighter-rouge">from django.http import HttpResponse</code>. Our file now looks like:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
 <span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

 <span class="c1"># Create your views here.
</span>
 <span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
     <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"Hello, world!"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>Now, we need to somehow associate this view we have just created 
with a specific URL. To do this, we’ll create another file called <code class="language-plaintext highlighter-rouge">urls.py</code> in the same directory as <code class="language-plaintext highlighter-rouge">views.py</code>. We already have a <code class="language-plaintext highlighter-rouge">urls.py</code> file for the whole project, but it is best to have a separate one for each individual app.</li>
  <li>Inside our new <code class="language-plaintext highlighter-rouge">urls.py</code>, we’ll create a list of url patterns that a user might visit while using our website. In order to do this:
    <ol>
      <li>We have to make some imports: <code class="language-plaintext highlighter-rouge">from django.urls import path</code> will give us the ability to reroute URLSs, and <code class="language-plaintext highlighter-rouge">from . import views</code> will import any functions we’ve created in <code class="language-plaintext highlighter-rouge">views.py</code>.</li>
      <li>Create a list called <code class="language-plaintext highlighter-rouge">urlpatterns</code></li>
      <li>For each desired URL, add an item to the <code class="language-plaintext highlighter-rouge">urlpatterns</code> list that contains a call to the <code class="language-plaintext highlighter-rouge">path</code> function with two or three arguments: A string representing the URL path, a function from <code class="language-plaintext highlighter-rouge">views.py</code> that we wish to call when that URL is visited, and (optionally) a name for that path, in the format <code class="language-plaintext highlighter-rouge">name="something"</code>. For example, here’s what our simple app looks like now:</li>
    </ol>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
 <span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

 <span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
     <span class="n">path</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"index"</span><span class="p">)</span>
 <span class="p">]</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now, we’ve created a <code class="language-plaintext highlighter-rouge">urls.py</code> for this specific application, and it’s time to edit the <code class="language-plaintext highlighter-rouge">urls.py</code> created for us for the entire project. When you open this file, you should see that there’s already a path called <code class="language-plaintext highlighter-rouge">admin</code> which we’ll go over in later lectures. We want to add another path for our new app, so we’ll add an item to the <code class="language-plaintext highlighter-rouge">urlpatterns</code> list. This follows the same pattern as our earlier paths, except instead of adding a function from <code class="language-plaintext highlighter-rouge">views.py</code> as our second argument, we want to be able to include <em>all</em> of the paths from the <code class="language-plaintext highlighter-rouge">urls.py</code> file within our application. To do this, we write: <code class="language-plaintext highlighter-rouge">include("APP_NAME.urls")</code>, where <code class="language-plaintext highlighter-rouge">include</code> is a function we gain access to by also importing <code class="language-plaintext highlighter-rouge">include</code> from <code class="language-plaintext highlighter-rouge">django.urls</code> as shown in the <code class="language-plaintext highlighter-rouge">urls.py</code> below:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'admin/'</span><span class="p">,</span> <span class="n">admin</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">urls</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'hello/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">"hello.urls"</span><span class="p">))</span>
<span class="p">]</span>
</code></pre></div>    </div>
  </li>
  <li>By doing this, we’ve specified that when a user visits our site, and then in the search bar adds <code class="language-plaintext highlighter-rouge">/hello</code> to the URL, they’ll be redirected to the paths inside of our new application.</li>
</ol>

<p>Now, when I start my application using <code class="language-plaintext highlighter-rouge">python manage.py runserver</code> and visit the url provided, I’m met with this screen:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/404.png" alt="wrong url">
But this is because we have only defined the URL <code class="language-plaintext highlighter-rouge">localhost:8000/hello</code>, but we haven’t defined the URL <code class="language-plaintext highlighter-rouge">localhost:8000</code> with nothing added to the end. So, when I add <code class="language-plaintext highlighter-rouge">/hello</code> to the URL in my search bar:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/helloworld.png" alt="Hello, world">
Now that we’ve had some success, let’s go over what just happened to get us to that point:</p>
<ol>
  <li>When we accessed the URL <code class="language-plaintext highlighter-rouge">localhost:8000/hello/</code>, Django looked at what came after the base URL (<code class="language-plaintext highlighter-rouge">localhost:8000/</code>) and went to our project’s <code class="language-plaintext highlighter-rouge">urls.py</code> file and searched for a pattern that matched <code class="language-plaintext highlighter-rouge">hello</code>.</li>
  <li>It found that extension because we defined it, and saw that when met with that extension, it should <code class="language-plaintext highlighter-rouge">include</code> our <code class="language-plaintext highlighter-rouge">urls.py</code> file from within our application.</li>
  <li>Then, Django ignored the parts of the URL it has already used in rerouting (<code class="language-plaintext highlighter-rouge">localhost:8000/hello/</code>, or all of it) and looked inside our other <code class="language-plaintext highlighter-rouge">urls.py</code> file for a pattern that matches the remaining part of the URL.</li>
  <li>It found that our only path so far (<code class="language-plaintext highlighter-rouge">""</code>) matched what was left of the URL, and so it directed us to the function from <code class="language-plaintext highlighter-rouge">views.py</code> associated with that path.</li>
  <li>Finally, Django ran that function within <code class="language-plaintext highlighter-rouge">views.py</code>, and returned the result (<code class="language-plaintext highlighter-rouge">HttpResponse("Hello, world!")</code>) to our web browser.</li>
</ol>

<p>Now, if we want to, we can change the <code class="language-plaintext highlighter-rouge">index</code> function within <code class="language-plaintext highlighter-rouge">views.py</code>
 to return anything we want it to! We could even keep track of variables
 and do calculations within the function before eventually returning 
something.</p>

<p>Now, let’s take a look at how we can add more than one view to our 
application. We can follow many of the same steps within our application
 to create pages that say hello to Brian and David.</p>

<p>Inside <code class="language-plaintext highlighter-rouge">views.py</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

<span class="c1"># Create your views here.
</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"Hello, world!"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">brian</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"Hello, Brian!"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">david</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"Hello, David!"</span><span class="p">)</span>
</code></pre></div></div>

<p>Inside <code class="language-plaintext highlighter-rouge">urls.py</code> (within our application)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"index"</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">"brian"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">brian</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"brian"</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">"david"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">david</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"david"</span><span class="p">)</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Now, our site remains unchanged when we visit <code class="language-plaintext highlighter-rouge">localhost:8000/hello</code>, but we get different pages when we add <code class="language-plaintext highlighter-rouge">brian</code> or <code class="language-plaintext highlighter-rouge">david</code> to the URL:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/brian.png" alt="Brian">
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/david.png" alt="David"></p>

<p>Many sites are parameterized by items included in the URL. For example, going to <a href="https://twitter.com/cs50">www.twitter.com/cs50</a> will show you all of CS50’s tweets, and going to <a href="https://github.com/cs50">www.github.com/cs50</a> will bring you to CS50’s GitHub page. You can even find your own public GitHub repositories by navigating to <code class="language-plaintext highlighter-rouge">www.github.com/YOUR_USERNAME</code>!</p>

<p>In thinking about how this is implemented, it seems impossible that 
sites like GitHub and Twitter would have an individual URL path for each
 of its users, so let’s look into how we could make a path that’s a bit 
more flexible. We’ll start by adding a more general function, called <code class="language-plaintext highlighter-rouge">greet</code>, to <code class="language-plaintext highlighter-rouge">views.py</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="sa">f</span><span class="s">"Hello, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">!"</span><span class="p">)</span>
</code></pre></div></div>

<p>This function takes in not only a request, but also an additional 
argument of a user’s name, and then returns a custom HTTP Response based
 on that name. Next, we have to create a more flexible path in <code class="language-plaintext highlighter-rouge">urls.py</code>, which could look somehting like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">path</span><span class="p">(</span><span class="s">"&lt;str:name&gt;"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">greet</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"greet"</span><span class="p">)</span>
</code></pre></div></div>

<p>This is some new syntax, but essentially what’s going on here is 
we’re no longer looking for a specific word or name in the URL, but any 
string that a user might enter. Now, we can try the site out with a few 
other URLs:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/harry.png" alt="harry">
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/connor.png" alt="connor"></p>

<p>I can even make these look a little bit nicer, by augmenting the <code class="language-plaintext highlighter-rouge">greet</code> function to utilize Python’s <code class="language-plaintext highlighter-rouge">capitalize</code> function that capitalizes a string:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="sa">f</span><span class="s">"Hello, </span><span class="si">{</span><span class="n">name</span><span class="p">.</span><span class="n">capitalize</span><span class="p">()</span><span class="si">}</span><span class="s">!"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/harryc.png" alt="Harry">
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/connorc.png" alt="Connor"></p>

<p>This is a great illustration of how any functionality we have in Python can be used in Django before being returned.</p>

<a data-id="" id="templates" style="top: -81.3333px;"></a><h2><a data-id="" href="#templates">Templates</a></h2>

<p>So far, our HTTP Responses, have been only text, but we can include 
any HTML elements we want to! For example, I could decide to return a 
blue header instead of just the text in our <code class="language-plaintext highlighter-rouge">index</code> function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"&lt;h1 style=</span><span class="se">\"</span><span class="s">color:blue</span><span class="se">\"</span><span class="s">&gt;Hello, world!&lt;/h1&gt;"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bluehello.png" alt="Blue"></p>

<p>It would get very tedious to write an entire HTML page within <code class="language-plaintext highlighter-rouge">views.py</code>. It would also constitute bad design, as we want to keep separate parts of our project in separate files whenever possible.</p>

<p>This is why we’ll now introduce <a href="https://docs.djangoproject.com/en/3.0/topics/templates/">Django’s templates</a>,
 which will allow us to write HTML and CSS in separate files and render 
those files using Django. The syntax we’ll use for rendering a template 
looks like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"hello/index.html"</span><span class="p">)</span>
</code></pre></div></div>

<p>Now, we’ll need to create that template. To do this, we’ll create a folder called <code class="language-plaintext highlighter-rouge">templates</code> inside our app, then create a folder called <code class="language-plaintext highlighter-rouge">hello</code> (or whatever our app’s name is) within that, and then add a file called <code class="language-plaintext highlighter-rouge">index.html</code>.</p>

<p><img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/files.png" alt="Files"></p>

<p>Next, we’ll add whatever we want to that new file:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Hello<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Hello, World!<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Now, when we visit the main page of our application, we can see the header and title have been updated:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/template0.png" alt="template0"></p>

<p>In addition to writing some static HTML pages, we can also use <a href="https://docs.djangoproject.com/en/3.0/ref/templates/language/">Django’s templating language</a> to change the content of our HTML files based on the URL visited. Let’s try it out by changing our <code class="language-plaintext highlighter-rouge">greet</code> function from earlier:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"hello/greet.html"</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">"name"</span><span class="p">:</span> <span class="n">name</span><span class="p">.</span><span class="n">capitalize</span><span class="p">()</span>
    <span class="p">})</span>
</code></pre></div></div>

<p>Notice that we passed a third argument into the <code class="language-plaintext highlighter-rouge">render</code> function here, one that is known as the <strong>context</strong>.
 In this context, we can provide information that we would like to have 
available within our HTML files. This context takes the form of a Python
 dictionary. Now, we can create a <code class="language-plaintext highlighter-rouge">greet.html</code> file:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Hello<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Hello, {{ name }}!<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>You’ll noticed that we used some new syntax: double curly brackets. 
This syntax allows us to access variables that we’ve provided in the <code class="language-plaintext highlighter-rouge">context</code> argument. Now, when we try it out:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/template1.png" alt="Template 1">
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/template2.png" alt="Template 2"></p>

<p>Now, we’ve seen how we can modify our HTML templates based on the 
context we provide. However, the Django templating language is even more
 powerful than that, so let’s take a look at a few other ways it can be 
helpful:</p>

<a data-id="" id="conditionals" style="top: -81.3333px;"></a><h3><a data-id="" href="#conditionals">Conditionals:</a></h3>

<p>We may want to change what is displayed on our website depending on some conditions. For example, if you visit the site <a href="https://www.isitchristmas.com/">www.isitchristmas.com</a>, you’ll probably be met with a page that looks like this:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/isitno.png" alt="no">
But this website will change on Christmas day, when the website will say <strong>YES</strong>.
 To make something like this for ourselves, let’s try creating a similar
 application, where we check whether or not it is New Year’s Day. Let’s 
create a new app to do so, recalling our process for creating a new app:</p>
<ol>
  <li>run <code class="language-plaintext highlighter-rouge">python manage.py startapp newyear</code> in the terminal.</li>
  <li>Edit <code class="language-plaintext highlighter-rouge">settings.py</code>, adding “newyear” as one of our <code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code></li>
  <li>Edit our project’s <code class="language-plaintext highlighter-rouge">urls.py</code> file, and include a path similar to the one we created for the <code class="language-plaintext highlighter-rouge">hello</code> app:</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">path</span><span class="p">(</span><span class="s">'newyear/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">"newyear.urls"</span><span class="p">))</span>
</code></pre></div></div>

<ol>
  <li>Create another <code class="language-plaintext highlighter-rouge">urls.py</code> file within our new app’s directory, and update it to include a path similar to the index path in <code class="language-plaintext highlighter-rouge">hello</code>:</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"index"</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>

<ol>
  <li>Create an index function in <code class="language-plaintext highlighter-rouge">views.py</code>.</li>
</ol>

<p>Now that we’re set up with our new app, let’s figure out how to check
 whether or not it’s New Year’s Day. To do this, we can import Python’s <a href="https://docs.python.org/3/library/datetime.html">datetime</a> module. To get a sense for how this module works, we can look at the <a href="https://docs.python.org/3/library/datetime.html">documentation</a>, and then test it outside of Django using the Python interpreter.</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The <strong>Python interpreter</strong> is a tool we can use to test out small chunks of Python code. To use this, run <code class="language-plaintext highlighter-rouge">python</code>
 in your terminal, and then you’ll be able to type and run Python code 
within your terminal. When you’re done using the interpreter, run <code class="language-plaintext highlighter-rouge">exit()</code> to leave.
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/datetime.png" alt="interpreter"></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We can use this knowledge to construct a boolean expression that will evaluate to True if and only if today is New Year’s Day: <code class="language-plaintext highlighter-rouge">now.day == 1 and now.month == 1</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Now that we have an expression we can use to evaluate whether or not it’s New Year’s Day, we can update our index function in <code class="language-plaintext highlighter-rouge">views.py</code>:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"newyear/index.html"</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">"newyear"</span><span class="p">:</span> <span class="n">now</span><span class="p">.</span><span class="n">month</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">now</span><span class="p">.</span><span class="n">day</span> <span class="o">==</span> <span class="mi">1</span>
    <span class="p">})</span>
</code></pre></div></div>

<p>Now, let’s create our <code class="language-plaintext highlighter-rouge">index.html</code> template. We’ll have to again create a new folder called <code class="language-plaintext highlighter-rouge">templates</code>, a folder within that called <code class="language-plaintext highlighter-rouge">newyear</code>, and a file within that called <code class="language-plaintext highlighter-rouge">index.html</code>. Inside that file, we’ll write something like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Is it New Year's?<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        {% if newyear %}
            <span class="nt">&lt;h1&gt;</span>YES<span class="nt">&lt;/h1&gt;</span>
        {% else %}
            <span class="nt">&lt;h1&gt;</span>NO<span class="nt">&lt;/h1&gt;</span>
        {% endif %}
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>In the code above, notice that when we wish to include logic in our HTML files, we use <code class="language-plaintext highlighter-rouge">{%</code> and <code class="language-plaintext highlighter-rouge">%}</code>
 as opening and closing tags around logical statements. Also note that 
Django’s formatting language requires you to include an ending tag 
indicating that we are done with our <code class="language-plaintext highlighter-rouge">if-else</code> block. Now, we can open up to our page to see:</p>

<p><img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/no.png" alt="No"></p>

<p>Now, to get a better idea of what’s going on behind the scenes, let’s inspect the element of this page:</p>

<p><img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/source.png" alt="Source"></p>

<p>Notice that the HTML that is actually being sent to your web browser 
includes only the NO header, meaning that Django is using the HTML 
template we wrote to create a new HTML file, and then sending it to our 
web browser. If we cheat a little bit and make sure that our condition 
is always true, we see that the opposite case is filled:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"newyear/index.html"</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">"newyear"</span><span class="p">:</span> <span class="bp">True</span>
    <span class="p">})</span>
</code></pre></div></div>

<p><img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/yes.png" alt="Yes">
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/source0.png" alt="Source 0"></p>

<a data-id="" id="styling" style="top: -81.3333px;"></a><h3><a data-id="" href="#styling">Styling</a></h3>

<p>If we want to add a CSS file, which is a <em>static</em> file because it doesn’t change, we’ll first create a folder called <code class="language-plaintext highlighter-rouge">static</code>, then create a <code class="language-plaintext highlighter-rouge">newyear</code> folder within that, and then a <code class="language-plaintext highlighter-rouge">styles.css</code> file within that. In this file, we can add any styling we wish just as we did in the first lecture:</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">h1</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="nb">sans-serif</span><span class="p">;</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">90px</span><span class="p">;</span>
    <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, to include this styling in our HTML file, we add the line <code class="language-plaintext highlighter-rouge">{% load static %}</code> to the top of our HTML template, which signals to Django that we wish to have access to the files in our <code class="language-plaintext highlighter-rouge">static</code> folder. Then, rather than hard-coding the link to a stylesheet as we did before, we’ll use some Django-specific syntax:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"{% static 'newyear/styles.css' %}"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Now, if we restart the server, we can see that the styling changes were in fact applied:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/bigno.png" alt="big no"></p>

<a data-id="" id="tasks" style="top: -81.3333px;"></a><h2><a data-id="" href="#tasks">Tasks</a></h2>

<p>Now, let’s take what we’ve learned so far and apply it to a mini-project: creating a TODO list.
Let’s start by, once again, creating a new app:</p>
<ol>
  <li>run <code class="language-plaintext highlighter-rouge">python manage.py startapp tasks</code> in the terminal.</li>
  <li>Edit <code class="language-plaintext highlighter-rouge">settings.py</code>, adding “tasks” as one of our <code class="language-plaintext highlighter-rouge">INSTALLED_APPS</code></li>
  <li>
    <p>Edit our project’s <code class="language-plaintext highlighter-rouge">urls.py</code> file, and include a path similar to the one we created for the <code class="language-plaintext highlighter-rouge">hello</code> app:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">path</span><span class="p">(</span><span class="s">'tasks/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">"tasks.urls"</span><span class="p">))</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Create another <code class="language-plaintext highlighter-rouge">urls.py</code> file within our new app’s directory, and update it to include a path similar to the index path in <code class="language-plaintext highlighter-rouge">hello</code>:</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
 <span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

 <span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
     <span class="n">path</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"index"</span><span class="p">),</span>
 <span class="p">]</span>
</code></pre></div>    </div>
  </li>
  <li>Create an index function in <code class="language-plaintext highlighter-rouge">views.py</code>.</li>
</ol>

<p>Now, let’s begin by attempting to simply create a list of tasks and 
then display them to a page. Let’s create a Python list at the top of <code class="language-plaintext highlighter-rouge">views.py</code> where we’ll store our tasks. Then, we can update our <code class="language-plaintext highlighter-rouge">index</code> function to render a template, and provide our newly-created list as context.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>

<span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">]</span>

<span class="c1"># Create your views here.
</span><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"tasks/index.html"</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">"tasks"</span><span class="p">:</span> <span class="n">tasks</span>
    <span class="p">})</span>
</code></pre></div></div>

<p>Now, let’s work on creating our template HTML file:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Tasks<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;ul&gt;</span>
            {% for task in tasks %}
                <span class="nt">&lt;li&gt;</span>{{ task }}<span class="nt">&lt;/li&gt;</span>
            {% endfor %}
        <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Notice here that we are able to loop over our tasks using syntax 
similar to our conditionals from earlier, and also similar to a Python 
loop from Lecture 2. When we go to the tasks page now, we can see our 
list being rendered:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/tasks0.png" alt="tasks0"></p>

<a data-id="" id="forms" style="top: -81.3333px;"></a><h2><a data-id="" href="#forms">Forms</a></h2>

<p>Now that we can see all of our current tasks as a list, we may want 
to be able to add some new tasks. To do this we’ll start taking a look 
at using forms to update a web page. Let’s begin by adding another 
function to <code class="language-plaintext highlighter-rouge">views.py</code> that will render a page with a form for adding a new task:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Add a new task:
</span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"tasks/add.html"</span><span class="p">)</span>
</code></pre></div></div>

<p>Next, make sure to add another path to <code class="language-plaintext highlighter-rouge">urls.py</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">path</span><span class="p">(</span><span class="s">"add"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">add</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"add"</span><span class="p">)</span>
</code></pre></div></div>

<p>Now, we’ll create our <code class="language-plaintext highlighter-rouge">add.html</code> file, which is fairly similar to <code class="language-plaintext highlighter-rouge">index.html</code>, except that in the body we’ll include a form rather than a list:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Tasks<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;h1&gt;</span>Add Task:<span class="nt">&lt;/h1&gt;</span>
        <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">""</span><span class="nt">&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span><span class="err">,</span> <span class="na">name=</span><span class="s">"task"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>However, what we’ve just done isn’t necessarily the best design, as 
we’ve just repeated the bulk of that HTML in two different files. 
Django’s templating language gives us a way to eliminate this poor 
design: <a href="https://tutorial.djangogirls.org/en/template_extending/">template inheritance</a>. This allows us to create a <code class="language-plaintext highlighter-rouge">layout.html</code> file that will contain the general structure of our page:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;title&gt;</span>Tasks<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        {% block body %}
        {% endblock %}
    <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>Notice that we’ve again used <code class="language-plaintext highlighter-rouge">{%...%}</code>
 to denote some sort of non-HTML logic, and in this case, we’re telling 
Django to fill this “block” with some text from another file. Now, we 
can alter our other two HTML files to look like:</p>

<p><code class="language-plaintext highlighter-rouge">index.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% extends "tasks/layout.html" %}

{% block body %}
    <span class="nt">&lt;h1&gt;</span>Tasks:<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
        {% for task in tasks %}
            <span class="nt">&lt;li&gt;</span>{{ task }}<span class="nt">&lt;/li&gt;</span>
        {% endfor %}
    <span class="nt">&lt;/ul&gt;</span>
{% endblock %}
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">add.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% extends "tasks/layout.html" %}

{% block body %}
    <span class="nt">&lt;h1&gt;</span>Add Task:<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">""</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span><span class="err">,</span> <span class="na">name=</span><span class="s">"task"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
{% endblock %}
</code></pre></div></div>

<p>Notice how we can now get rid of much of the repeated code by <em>extending</em> our layout file. Now, our index page remains the same, and we now have an add page as well:</p>

<p><img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/add.png" alt="Add"></p>

<p>Next, it’s not ideal to have to type “/add” in the URL any time we 
want to add a new task, so we’ll probably want to add some links between
 pages. Instead of hard-coding links though, we can now use the <code class="language-plaintext highlighter-rouge">name</code> variable we assigned to each path in <code class="language-plaintext highlighter-rouge">urls.py</code>, and create a link that looks like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{% url 'add' %}"</span><span class="nt">&gt;</span>Add a New Task<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>

<p>where ‘add’ is the name of that path. We can do a similar thing in our <code class="language-plaintext highlighter-rouge">add.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{% url 'index' %}"</span><span class="nt">&gt;</span>View Tasks<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>

<p>This could potentially create a problem though, as we have a few routes named <code class="language-plaintext highlighter-rouge">index</code> throughout our different apps. We can solve this by going into each of our app’s <code class="language-plaintext highlighter-rouge">urls.py</code> file, and adding an <code class="language-plaintext highlighter-rouge">app_name</code> variable, so that the files now look something like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">"tasks"</span>
<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"index"</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">"add"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">add</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"add"</span><span class="p">)</span>
<span class="p">]</span>
</code></pre></div></div>

<p>We can then change our links from simply <code class="language-plaintext highlighter-rouge">index</code> and <code class="language-plaintext highlighter-rouge">add</code> to <code class="language-plaintext highlighter-rouge">tasks:index</code> and <code class="language-plaintext highlighter-rouge">tasks:add</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{% url 'tasks:index' %}"</span><span class="nt">&gt;</span>View Tasks<span class="nt">&lt;/a&gt;</span>

<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{% url 'tasks:add' %}"</span><span class="nt">&gt;</span>Add a New Task<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>

<p>Now, let’s work on making sure the form actually does something when the user submits it. We can do this by adding an <code class="language-plaintext highlighter-rouge">action</code> to the form we have created in <code class="language-plaintext highlighter-rouge">add.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"{% url 'tasks:add' %}"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>This means that once the form is submitted, we will be routed back to the <code class="language-plaintext highlighter-rouge">add</code> URL. Here we’ve specified that we’ll be using a <em>post</em> method rather than a <em>get</em> method, which is typically what we’ll use any time a form could alter the state of that web page.</p>

<p>We need to add a bit more to this form now, because Django requires a token to prevent <a href="https://portswigger.net/web-security/csrf">Cross-Site Request Forgery (CSRF) Attack</a>.
 This is an attack where a malicious user attempts to send a request to 
your server from somewhere other than your site. This could be a really 
big problem for some websites. Say, for example, that a banking website 
has a form for one user to transfer money to another one. It would be 
catastrophic if someone could submit a transfer from outside of the 
bank’s website!</p>

<p>To solve this problem, when Django sends a response rendering a template, it also provides a <strong>CSRF token</strong>
 that is unique with each new session on the site. Then, when a request 
is submitted, Django checks to make sure the CSRF token associated with 
the request matches one that it has recently provided. Therefore, if a 
malicious user on another site attempted to submit a request, they would
 be blocked due to an invalid CSRF token. This CSRF validation is built 
into the <a href="https://docs.djangoproject.com/en/3.0/topics/http/middleware/">Django Middleware</a>
 framework, which can intervene in the request-response processing of a 
Django app. We won’t go into any more detail about Middleware in this 
course, but do look at the <a href="https://docs.djangoproject.com/en/3.0/topics/http/middleware/">documentation</a> if interested!</p>

<p>To incorporate this technology into our code, we must add a line to our form in <code class="language-plaintext highlighter-rouge">add.html</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"{% url 'tasks:add' %}"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    {% csrf_token %}
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span><span class="err">,</span> <span class="na">name=</span><span class="s">"task"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>This line adds a hidden input field with the CSRF token provided by 
Django, such that when we reload the page, it looks as though nothing 
has changed. However, if we inspect element, we’ll notice that a new 
input field has been added:
<img src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/csrf.png" alt="CSRF"></p>

<a data-id="" id="django-forms" style="top: -81.3333px;"></a><h3><a data-id="" href="#django-forms">Django Forms</a></h3>

<p>While we can create forms by writing raw HTML as we’ve just done, 
Django provides an even easier way to collect information from a user: <a href="https://docs.djangoproject.com/en/3.0/ref/forms/api/">Django Forms</a>. In order to use this method, we’ll add the following to the top of <code class="language-plaintext highlighter-rouge">views.py</code> to import the <code class="language-plaintext highlighter-rouge">forms</code> module:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
</code></pre></div></div>

<p>Now, we can create a new form within <code class="language-plaintext highlighter-rouge">views.py</code> by creating a Python class called <code class="language-plaintext highlighter-rouge">NewTaskForm</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">NewTaskForm</span><span class="p">(</span><span class="n">forms</span><span class="p">.</span><span class="n">Form</span><span class="p">):</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">forms</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">"New Task"</span><span class="p">)</span>
</code></pre></div></div>

<p>Now, let’s go through what’s going on in that class:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Inside the parentheses after <code class="language-plaintext highlighter-rouge">NewTaskForm</code>, we see that we have <code class="language-plaintext highlighter-rouge">forms.Form</code>. This is because our new form <a href="https://www.w3schools.com/python/python_inheritance.asp">inherits</a> from a class called <code class="language-plaintext highlighter-rouge">Form</code> that is included in the <code class="language-plaintext highlighter-rouge">forms</code>
 module. We’ve already seen how inheritance can be used in Django’s 
templating language and for styling using Sass. This is another example 
of how inheritance is used to take a more general description (the <code class="language-plaintext highlighter-rouge">forms.Form</code>
 class) and narrow it down to what we want (our new Form). Inheritance 
is a key part of Object Oriented Programming that we won’t discuss in 
detail during this course, but there are <a href="https://www.w3schools.com/python/python_inheritance.asp">many online resources</a> available to learn about the topic!</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Inside this class, we can specify what information we would like to collect from the user, in this case the name of a task.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We specify that this should be a textual input by writing <code class="language-plaintext highlighter-rouge">forms.CharField</code>, but there are <a href="https://docs.djangoproject.com/en/3.0/ref/forms/fields/#built-in-field-classes">many other input fields</a> included in Django’s form module that we can choose from.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Within this <code class="language-plaintext highlighter-rouge">CharField</code>, we specify a <code class="language-plaintext highlighter-rouge">label</code>, which will appear to the user when they load the page. A <code class="language-plaintext highlighter-rouge">label</code> is just one of <a href="https://docs.djangoproject.com/en/3.0/ref/forms/fields/#core-field-arguments">many arguments</a> we can pass into a form field.</li>
</ul>

<p>Now that we’ve created a <code class="language-plaintext highlighter-rouge">NewTaskForm</code> class, we can include it in the context while rendering the <code class="language-plaintext highlighter-rouge">add</code> page:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Add a new task:
</span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"tasks/add.html"</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">"form"</span><span class="p">:</span> <span class="n">NewTaskForm</span><span class="p">()</span>
    <span class="p">})</span>
</code></pre></div></div>

<p>Now, within <code class="language-plaintext highlighter-rouge">add.html</code>, we can replace our input field with the form we just created:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% extends "tasks/layout.html" %}

{% block body %}
    <span class="nt">&lt;h1&gt;</span>Add Task:<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"{% url 'tasks:add' %}"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
        {% csrf_token %}
        {{ form }}
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{% url 'tasks:index' %}"</span><span class="nt">&gt;</span>View Tasks<span class="nt">&lt;/a&gt;</span>
{% endblock %}
</code></pre></div></div>

<p>There are several advantages to using the <code class="language-plaintext highlighter-rouge">forms</code> module rather than manually writing an HTML form:</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>If we want to add new fields to the form, we can simply add them in <code class="language-plaintext highlighter-rouge">views.py</code> without typing additional HTML.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Django automatically performs <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation">client-side validation</a>, or validation local to the user’s machine. meaning it will not allow a user to submit their form if it is incomplete.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Django provides simple <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation">server-side validation</a>, or validation that occurs once form data has reached the server.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In the next lecture, we’ll begin using <strong>models</strong> to store information, and Django makes it very simple to create a form based on a model.</li>
</ul>

<p>Now that we have a form set up, let’s work on what happens when a 
user clicks the submit button. When a user navigates to the add page by 
clicking a link or typing in the URL, they submit a <code class="language-plaintext highlighter-rouge">GET</code> request to the server, which we’ve already handled in our <code class="language-plaintext highlighter-rouge">add</code> function. When a user submits a form though, they send a <code class="language-plaintext highlighter-rouge">POST</code> request to the server, which at the moment is not handled in the <code class="language-plaintext highlighter-rouge">add</code> function. We can handle a <code class="language-plaintext highlighter-rouge">POST</code> method by adding a condition based on the <code class="language-plaintext highlighter-rouge">request</code> argument our function takes in. The comments in the code below explain the purpose of each line:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Add a new task:
</span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>

    <span class="c1"># Check if method is POST
</span>    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">"POST"</span><span class="p">:</span>

        <span class="c1"># Take in the data the user submitted and save it as form
</span>        <span class="n">form</span> <span class="o">=</span> <span class="n">NewTaskForm</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">)</span>

        <span class="c1"># Check if form data is valid (server-side)
</span>        <span class="k">if</span> <span class="n">form</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>

            <span class="c1"># Isolate the task from the 'cleaned' version of form data
</span>            <span class="n">task</span> <span class="o">=</span> <span class="n">form</span><span class="p">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">"task"</span><span class="p">]</span>

            <span class="c1"># Add the new task to our list of tasks
</span>            <span class="n">tasks</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>

            <span class="c1"># Redirect user to list of tasks
</span>            <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="s">"tasks:index"</span><span class="p">))</span>

        <span class="k">else</span><span class="p">:</span>

            <span class="c1"># If the form is invalid, re-render the page with existing information.
</span>            <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"tasks/add.html"</span><span class="p">,</span> <span class="p">{</span>
                <span class="s">"form"</span><span class="p">:</span> <span class="n">form</span>
            <span class="p">})</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"tasks/add.html"</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">"form"</span><span class="p">:</span> <span class="n">NewTaskForm</span><span class="p">()</span>
    <span class="p">})</span>
</code></pre></div></div>

<p>A quick note: in order to redirect the user after a successful submission, we need a few more imports:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">reverse</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponseRedirect</span>
</code></pre></div></div>

<a data-id="" id="sessions" style="top: -81.3333px;"></a><h2><a data-id="" href="#sessions">Sessions</a></h2>

<dl>
  <dt>At this point, we’ve successfully built an application that allows
 us to add tasks to a growing list. However, it may be a problem that we
 store these tasks as a global variable, as it means that all of the 
users who visit the page see the exact same list. In order to solve this
 problem we’re going to employ a tool known as <a href="https://docs.djangoproject.com/en/3.0/topics/http/sessions/">sessions.</a></dt>
  <dd>
    <p>Sessions are a way to store unique data on the server side for each new visit to a website.</p>
  </dd>
</dl>

<p>To use sessions in our application, we’ll first delete our global <code class="language-plaintext highlighter-rouge">tasks</code> variable, then alter our <code class="language-plaintext highlighter-rouge">index</code> function, and finally make sure that anywhere else we had used the variable <code class="language-plaintext highlighter-rouge">tasks</code>, we replace it with <code class="language-plaintext highlighter-rouge">request.session["tasks"]</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>

    <span class="c1"># Check if there already exists a "tasks" key in our session
</span>
    <span class="k">if</span> <span class="s">"tasks"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">:</span>

        <span class="c1"># If not, create a new list
</span>        <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">[</span><span class="s">"tasks"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"tasks/index.html"</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">"tasks"</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">[</span><span class="s">"tasks"</span><span class="p">]</span>
    <span class="p">})</span>

<span class="c1"># Add a new task:
</span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">"POST"</span><span class="p">:</span>

        <span class="c1"># Take in the data the user submitted and save it as form
</span>        <span class="n">form</span> <span class="o">=</span> <span class="n">NewTaskForm</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">)</span>

        <span class="c1"># Check if form data is valid (server-side)
</span>        <span class="k">if</span> <span class="n">form</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>

            <span class="c1"># Isolate the task from the 'cleaned' version of form data
</span>            <span class="n">task</span> <span class="o">=</span> <span class="n">form</span><span class="p">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">"task"</span><span class="p">]</span>

            <span class="c1"># Add the new task to our list of tasks
</span>            <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">[</span><span class="s">"tasks"</span><span class="p">]</span> <span class="o">+=</span> <span class="p">[</span><span class="n">task</span><span class="p">]</span>

            <span class="c1"># Redirect user to list of tasks
</span>            <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="s">"tasks:index"</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>

            <span class="c1"># If the form is invalid, re-render the page with existing information.
</span>            <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"tasks/add.html"</span><span class="p">,</span> <span class="p">{</span>
                <span class="s">"form"</span><span class="p">:</span> <span class="n">form</span>
            <span class="p">})</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"tasks/add.html"</span><span class="p">,</span> <span class="p">{</span>
        <span class="s">"form"</span><span class="p">:</span> <span class="n">NewTaskForm</span><span class="p">()</span>
    <span class="p">})</span>
</code></pre></div></div>

<p>Finally, before Django will be able to store this data, we must run <code class="language-plaintext highlighter-rouge">python manage.py migrate</code>
 in the terminal. Next week we’ll talk more about what a migration is, 
but for now just know that the above command allows us to store 
sessions.</p>

<p>That’s all for this lecture! Next time we’ll be working on using Django to store, access, and manipulate data.</p>


                </main>

            </div>

        </div>

        
 
        <script src="Lecture%203%20-%20CS50's%20Web%20Programming%20with%20Python%20and%20JavaScript_files/page.js"></script>

    


</body></html>